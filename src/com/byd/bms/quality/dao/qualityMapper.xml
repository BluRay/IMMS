<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.byd.bms.quality.dao.IQualityDao">
<!-- ======================== xjw start=================================-->
	<resultMap type="com.byd.bms.quality.model.StdFaultLibBean" id="faultLibMap">
		<id property="id" column="id" />
		<result property="partsId" column="parts_id" />
		<result property="parts" column="parts" />
		<result property="bugType" column="bug_type" />
		<result property="bug" column="bug" />
		<result property="faultLevel" column="serious_level" />
		<result property="workshop" column="workshop_name" />
		<result property="workgroup" column="workgroup_name" />
		<result property="editorId" column="editor_id" />
		<result property="editor" column="username" />
		<result property="editDate" column="edit_date" />
	</resultMap>
	<select id="getOrderConfigList" parameterType="Map" resultType="Map">
		select o.id,c.id config_id,o.order_no,CONCAT(o.order_no,' ',o.order_name,t.bus_type_code,'  ',o.order_qty,' ','台') AS order_desc,
		o.memo,t.bus_type_code bus_type,c.order_config_name,u.username editor,h.edit_date,o.bus_type_id
		from BMS_OR_ORDER_CONFIG c 
		left join BMS_OR_ORDER o on o.id=c.order_id
		left join BMS_BASE_BUS_TYPE t on o.bus_type_id=t.id 
		left join BMS_QM_KEY_PARTS_TEMPLATE_HEADER h on h.bus_type_id=t.id and h.order_id=c.order_id and h.order_config_id=c.id
		left join BMS_BASE_USER u on u.id=h.editor_id
		where 1=1
		<if test="order_id !=null and order_id !=''">
			and o.id=#{order_id}
		</if>
		<if test="bus_type_id !=null and bus_type_id !=''">
			and o.bus_type_id=#{bus_type_id}
		</if>
		<if test="order_config_id !=null and order_config_id !='' ">
			and c.id=#{order_config_id}
		</if>
			order by o.order_no desc
		<if test="start !=null">
			limit #{start},#{length}
		</if>
		
	</select>
	
	<select id="checkOrderNo" parameterType="String" resultType="int">
	SELECT (
	(SELECT COUNT(*) FROM BMS_OR_ORDER WHERE order_no = #{order_no} )
	+
	(SELECT COUNT(*) FROM BMS_OR_HISTORY_ORDER WHERE order_no = #{order_no})) AS order_count
	</select>
	
	<select id="getConfigTotalCount" parameterType="Map" resultType="int">
		select count(c.id)
		from BMS_OR_ORDER_CONFIG c 
		left join BMS_OR_ORDER o on o.id=c.order_id
		where 1=1
		<if test="order_id !=null and order_id !=''">
			and o.id=#{order_id}
		</if>
		<if test="bus_type_id !=null and bus_type_id !=''">
			and o.bus_type_id=#{bus_type_id}
		</if>
		<if test="order_config_id !=null and order_config_id !='' ">
			and c.id=#{order_config_id}
		</if>
	</select>
	
	<select id="queryKeyPartsHeader" parameterType="Map" resultType="Map">
		select id,bus_type_id,order_id,order_config_id from BMS_QM_KEY_PARTS_TEMPLATE_HEADER 
		where bus_type_id=#{bus_type_id} and order_id=#{order_id} and order_config_id=#{order_config_id}
	</select>
	
	<insert id="saveKeyPartsHeader" parameterType="Map" useGeneratedKeys="true" keyProperty="id" >
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_KEY_PARTS_TEMPLATE_HEADER (bus_type_id,order_id,order_config_id,editor_id,edit_date)
		values (#{bus_type_id},#{order_id},#{order_config_id},#{editor_id},#{edit_date})
	</insert>
	
	<update id='updateKeyPartsHeader' parameterType="Map">
		update BMS_QM_KEY_PARTS_TEMPLATE_HEADER set editor_id=#{editor_id} ,edit_date=#{edit_date}
		where bus_type_id=#{bus_type_id} and order_id=#{order_id} and order_config_id=#{order_config_id}
	</update>
	
	<insert id="saveKeyPartsDetails" parameterType="Map" useGeneratedKeys="true" keyProperty="id" >
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_KEY_PARTS_TEMPLATE_DETAILS 
		(key_components_template_id,sap_mat,parts_no,parts_name,size,vendor,workshop,process,3C_components,3C_no)
		values
		<foreach collection="detail_list" item="detail" index="index" separator=",">
			(#{header_id},#{detail.sap_mat},#{detail.parts_no},#{detail.parts_name},#{detail.size},#{detail.vendor},#{detail.workshop},#{detail.process},#{detail.ccc},#{detail.cccNo})
		</foreach>		
	</insert>
	
	<delete id="deleteKeyPartsByHeader" parameterType="int">
		delete from BMS_QM_KEY_PARTS_TEMPLATE_DETAILS where key_components_template_id=#{header_id}
	</delete>
	
	<select id="queryKeyPartsList" parameterType="Map" resultType="Map">
		select d.sap_mat,d.parts_no,d.parts_name,d.size,d.vendor,d.workshop,d.process,d.3C_components ccc,d.3C_no cccNo
		from BMS_QM_KEY_PARTS_TEMPLATE_DETAILS d
		left join BMS_QM_KEY_PARTS_TEMPLATE_HEADER h on d.key_components_template_id=h.id
		where h.bus_type_id=#{bus_type_id} and h.order_id=#{order_id} and h.order_config_id=#{order_config_id}
	</select>
	
	<select id="queryKeyPartsListByPartsNo" parameterType="Map" resultType="Map">
		select d.sap_mat,d.parts_no,d.parts_name,d.size,d.vendor,d.workshop,d.process,d.3C_components ccc,d.3C_no cccNo
		from BMS_QM_KEY_PARTS_TEMPLATE_DETAILS d
		where d.parts_no=#{parts_no} and d.parts_name=#{parts_name}
	</select>
	
	<select id="queryWorkshopProcessList" resultType="Map">
     	select workshop,process_name process from BMS_BASE_PROCESS
     	where
     	<foreach collection='addList' item='detail' index="index" separator="or" >
     		(workshop=#{detail.workshop} and process_name=#{detail.process})
     	</foreach>
     </select>
     
     <select id="queryPrdRcdBusTypeTplList" parameterType="Map" resultType="Map">
     	select h.*,t.bus_type_code,u.username editor
     	from BMS_QM_TEST_CARD_TEMPLATE_HEADER h
     	left join BMS_BASE_BUS_TYPE t on t.id=h.bus_type_id
     	left join BMS_BASE_USER u on u.id=h.editor_id
     	where 1=1
     	<if test="bus_type_id !=null and bus_type_id !=0 ">
			and h.bus_type_id=#{bus_type_id}
		</if>
		<if test="test_node_id !=null and test_node_id !=0 ">
			and h.test_node_id=#{test_node_id}
		</if>
			order by h.bus_type_id,h.version desc
		<if test="start !=null">
			limit #{start},#{length}
		</if>
     </select>
     
     <select id="queryPrdRcdBusTypeTplCount" parameterType="Map" resultType="int">
     	select count(h.id) 
     	from BMS_QM_TEST_CARD_TEMPLATE_HEADER h
     	left join BMS_BASE_BUS_TYPE t on t.id=h.bus_type_id
     	where 1=1
     	<if test="bus_type_id !=null and bus_type_id !=0 ">
			and h.bus_type_id=#{bus_type_id}
		</if>
		<if test="test_node_id !=null and test_node_id !=0 ">
			and h.test_node_id=#{test_node_id}
		</if>
     </select>
     
     <insert id='insertPrdRcdBusTypeTplHeader' parameterType="Map" useGeneratedKeys="true" keyProperty="id" >
     	<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_TEST_CARD_TEMPLATE_HEADER (bus_type_id,test_node_id,test_node,tplType,version,memo,editor_id,edit_date)
		values (#{bus_type_id},#{test_node_id},#{test_node},'0',#{version},#{memo},#{editor_id},#{edit_date})
     </insert>
     
     <update id='updatePrdRcdBusTypeTplHeader' parameterType="Map">
     	update BMS_QM_TEST_CARD_TEMPLATE_HEADER set memo=#{memo},editor_id=#{editor_id},edit_date=#{edit_date}
     	where id=#{tpl_header_id}
     </update>
     
     <insert id="insertPrdRcdTplDetail" parameterType="Map"  useGeneratedKeys="true" keyProperty="id" >
     	<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_TEST_CARD_TEMPLATE_DETAILS (test_card_template_id,test_item_no,test_item,test_standard_no,test_standard,test_request,is_null)
		values
		<foreach collection="detail_list" item="detail" index="index" separator=",">
			(#{tpl_header_id},#{detail.test_item_no},#{detail.test_item},#{index},#{detail.test_standard},#{detail.test_request},#{detail.is_null})
		</foreach>	
     </insert>
     
     <delete id="deletePrdRcdTplByHeader" parameterType="int">
     	delete from BMS_QM_TEST_CARD_TEMPLATE_DETAILS where test_card_template_id=#{tpl_header_id}
     </delete>
     
     <select id="queryPrdRcdTplDetail" parameterType="String" resultType="Map">
     	select * from BMS_QM_TEST_CARD_TEMPLATE_DETAILS where test_card_template_id=#{tpl_header_id} 
     	order by cast(test_standard_no as signed)
     </select>
     
     <select id="queryPrdRcdOrderTplList" parameterType="Map" resultType="Map">
     	select h.id,t.bus_type_code bus_type,o.order_no,h.order_id,concat(o.order_no,' ',o.order_name,t.bus_type_code,' ',o.order_qty,'台') order_desc,h.bus_type_id,
     	h.order_config_id,c.order_config_name order_config,h.test_node_id,h.test_node,h.version,h.version_cp,u.username editor,h.edit_date,
     	(select count(t.bus_number) from BMS_QM_TEST_CARD t where t.test_card_template_head_id=h.id) record_num
     	from BMS_QM_TEST_CARD_TEMPLATE_HEADER h
     	left join BMS_BASE_BUS_TYPE t on h.bus_type_id=t.id
     	left join BMS_OR_ORDER o on o.id=h.order_id
     	left join BMS_OR_ORDER_CONFIG c on c.id=h.order_config_id
     	left join BMS_BASE_USER u on u.id=h.editor_id
     	where h.tplType='1'
     	<if test="order_id !=null and order_id !=''">
     		and h.order_id=#{order_id}
     	</if>
     	<if test="order_config_id !=null and order_config_id !=''">
     		and h.order_config_id=#{order_config_id}
     	</if>
     	<if test="bus_type_id !=null and bus_type_id !=''">
     		and h.bus_type_id=#{bus_type_id}
     	</if>
     	<if test="test_node_id !=null and test_node_id !=''">
     		and h.test_node_id=#{test_node_id}
     	</if>
     	order by h.order_id,h.order_config_id,h.version desc
		<if test="start !=null">
			limit #{start},#{length}
		</if>
     </select>
     
     <select id="queryPrdRcdOrderTplCount" parameterType="Map" resultType="int">
     	select count(id)  from BMS_QM_TEST_CARD_TEMPLATE_HEADER h
     	where h.tplType='1'
     	<if test="order_id !=null and order_id !=''">
     		and h.order_id=#{order_id}
     	</if>
     	<if test="order_config_id !=null and order_config_id !=''">
     		and h.order_config_id=#{order_config_id}
     	</if>
     	<if test="bus_type_id !=null and bus_type_id !=''">
     		and h.bus_type_id=#{bus_type_id}
     	</if>
     	<if test="test_node_id !=null and test_node_id !=''">
     		and h.test_node_id=#{test_node_id}
     	</if>
     </select>
     
     <select id="queryPrdRcdBusTypeTplHeader" parameterType="Map" resultType="Map">
     	select id,version from BMS_QM_TEST_CARD_TEMPLATE_HEADER
     	where tplType='0' and bus_type_id=#{bus_type_id} and test_node_id=#{test_node_id}
     	order by version desc
     	limit 1
     </select>
     
     <select id="queryPrdRcdOrderTplHeader" parameterType="Map" resultType="Map">
     	select h.id,h.version,b.factory_id,h.order_id,h.order_config_id,concat(o.order_no,' ',o.order_name,t.bus_type_code,' ',o.order_qty,'台') order_desc 
     	from BMS_QM_TEST_CARD_TEMPLATE_HEADER h
     	left join BMS_PLAN_BUS b on h.order_id=b.order_id and h.order_config_id=b.order_config_id 
     	left join BMS_BASE_BUS_TYPE t on t.id=h.bus_type_id
     	left join BMS_OR_ORDER o on o.id=h.order_id
     	where h.tplType='1' 
     	<if test="bus_number !=null and bus_number !='' ">
     		and b.bus_number=#{bus_number} 
     	</if>
     	<if test="order_id !=null and order_id !=''">
     		and h.order_id=#{order_id} 
     	</if>
     	<if test="order_config_id !=null and order_config_id !=''">
     		and h.order_config_id=#{order_config_id} 
     	</if>
     	and h.test_node=#{test_node}
     	order by version desc
     	limit 1
     </select>
<!--      <select id="queryPrdRcdBusTypeTplDetailLatest" parameterType="Map" resultType="Map">
     	select * from BMS_QM_TEST_CARD_TEMPLATE_DETAILS 
     	where  
     	order by cast(test_standard_no as signed)
     </select> -->
     
     <insert id='insertPrdRcdOrderTplHeader' parameterType="Map" useGeneratedKeys="true" keyProperty="id">
     	<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_TEST_CARD_TEMPLATE_HEADER 
		(bus_type_id,order_id,order_config_id,test_node_id,test_node,tplType,version,editor_id,edit_date,version_cp)
		values (#{bus_type_id},#{order_id},#{order_config_id},#{test_node_id},#{test_node},'1',#{version},#{editor_id},#{edit_date},#{version_cp})		
     </insert>
     
     <update id="updatePrdRcdOrderTplHeader" parameterType="Map">
     	update BMS_QM_TEST_CARD_TEMPLATE_HEADER set editor_id=#{editor_id},edit_date=#{edit_date}
     	where id=#{tpl_header_id}
     </update>
     
     <select id="getFaultLibFuzzyList" parameterType="Map" resultMap="faultLibMap">
		select f.id,<!-- f.parts_id,p.parts_name parts, -->f.bug_type,f.bug,f.serious_level,f.fault_type,
		f.workshop_name,f.workgroup_name,f.editor_id,u.username,f.edit_date
		from BMS_QM_STANDARD_FAULT_LIBRARY f 
		left join BMS_BASE_USER u on f.editor_id=u.id
		<!-- left join BMS_BASE_PARTS p on f.parts_id=p.id -->
		where 1=1
		<if test="bugType !=null and  bugType !=''">
			and f.bug_type like CONCAT('%',#{bugType},'%')
		</if>
		<if test="bug!=null and  bug!=''">
			and f.bug like CONCAT('%',#{bug},'%')
		</if>
		<if test="workshop !=null and workshop !=''">
			and f.workshop_name = #{workshop}
		</if>
		<if test="seriousLevel !=null and seriousLevel !=''">
			and f.serious_level = #{seriousLevel}
		</if>
		<if test="faultType !=null and  faultType !=''">
			and f.fault_type like CONCAT('%',#{faultType},'%')
		</if>

	</select>
     
     <update id="deleteProductRecord" parameterType="Map">
     	delete from BMS_QM_TEST_CARD
     	where bus_number=#{bus_number} and test_node=#{test_node}
     	<if test="test_card_template_detail_id !=null and test_card_template_detail_id !=''">
     		and test_card_template_detail_id=#{test_card_template_detail_id}
     	</if>
     	<if test="test_card_template_head_id !=null and test_card_template_head_id !=''">
     		and test_card_template_head_id=#{test_card_template_head_id}
     	</if>
     </update>
     
     <insert id="insertProductRecord" parameterType="Map" useGeneratedKeys="true" keyProperty="id">
     	<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_TEST_CARD 
		(bus_number,factory_id,test_node_id,test_node,order_id,order_config_id,result,test_card_template_head_id,test_card_template_detail_id,fault_id,
		test_result,result_judge,rework,tester,workshop_id,workgroup_id,editor_id,edit_date,test_date,memo,test_image)
		values
		<foreach collection="detail_list" item="detail" index="index" separator=",">
			(#{detail.bus_number},#{detail.factory_id},#{detail.test_node_id},#{detail.test_node},#{detail.order_id},#{detail.order_config_id},#{detail.result},#{detail.test_card_template_head_id},
			#{detail.test_card_template_detail_id},#{detail.fault_id},#{detail.test_result},#{detail.result_judge},#{detail.rework},#{detail.tester},
			#{detail.workshop_id},#{detail.workgroup_id},#{editor_id},#{edit_date},#{detail.test_date},#{detail.memo},#{detail.test_image_str})
		</foreach>	
     </insert>
     
     <insert id="insertProductRecordNoFault" parameterType="Map" useGeneratedKeys="true" keyProperty="id">
     	<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_TEST_CARD 
		(bus_number,factory_id,test_node_id,test_node,order_id,order_config_id,result,test_card_template_head_id,editor_id,edit_date,test_date)
		values
		(#{bus_number},#{detail.factory_id},#{detail.test_node_id},#{detail.test_node},#{detail.order_id},#{detail.order_config_id},#{detail.result},#{detail.test_card_template_head_id},
		#{editor_id},#{edit_date},#{detail.test_date})

     </insert>
     
     <select id="queryProductRecordList" parameterType="Map"  resultType="Map">
     	select c.bus_number,c.test_node,f.factory_name,c.factory_id,concat(o.order_no,o.order_name,t.bus_type_code,' ',o.order_qty,'台') order_desc,
     	c.test_date,c.test_node_id, c.order_id,c.order_config_id, c.tester,c.test_card_template_head_id,o.order_no,g.order_config_name,
     	case c.result when '0' then '一次交检合格' when '1' then '返工/返修合格' else '让步放行' end as result,u.username editor,c.edit_date
		from BMS_QM_TEST_CARD c
		left join BMS_BASE_FACTORY f on c.factory_id=f.id
		left join BMS_OR_ORDER o on c.order_id=o.id
		left join BMS_OR_ORDER_CONFIG g on g.id=c.order_config_id
		left join BMS_BASE_BUS_TYPE t on o.bus_type_id=t.id
		left join BMS_BASE_USER u on u.id=c.editor_id
		where 1=1
		<if test="factory_id !=null and factory_id !=''">
			and c.factory_id=#{factory_id}
		</if>
		<if test="test_node_id !=null and test_node_id !=''">
			and c.test_node_id=#{test_node_id}
		</if>
		<if test="order_no !=null and order_no !=''">
			and o.order_no=#{order_no}
		</if>
		<if test="bus_number !=null and bus_number !=''">
			and c.bus_number like concat('%',#{bus_number},'%')
		</if>
		<if test="result !=null and result !=''">
			and FIND_IN_SET(c.result,#{result}) 
		</if>
			group by c.bus_number,c.test_node,c.test_card_template_head_id
			order by c.edit_date desc
    	<if test="start !=null">
			limit #{start},#{length}
		</if>
     </select>
     
     <select id="queryProductRecordCount" parameterType="Map" resultType="int">
     	select count(*) from (
     	select c.bus_number,c.test_node
		from BMS_QM_TEST_CARD c
		left join BMS_OR_ORDER o on c.order_id=o.id
		where 1=1
		<if test="factory_id !=null and factory_id !=''">
			and c.factory_id=#{factory_id}
		</if>
		<if test="test_node_id !=null and test_node_id !=''">
			and c.test_node_id=#{test_node_id}
		</if>
		<if test="test_node !=null and test_node !=''">
			and c.test_node=#{test_node}
		</if>
		<if test="order_no !=null and order_no !=''">
			and o.order_no=#{order_no}
		</if>
		<if test="order_id !=null and order_id !=''">
			and c.order_id=#{order_id}
		</if>
		<if test="order_config_id !=null and order_config_id !=''">
			and c.order_config_id=#{order_config_id}
		</if>
		<if test="bus_number !=null and bus_number !=''">
			and c.bus_number like concat('%',#{bus_number},'%')
		</if>
		<if test="customer_no !=null and customer_no !=''">
			and c.bus_number like concat('%',#{customer_no},'%')
		</if>
		<if test="result !=null and result !=''">
			and FIND_IN_SET(c.result,#{result}) 
		</if>
		<if test="tpl_header_id !=null and tpl_header_id !=''">
			and c.test_card_template_head_id=#{tpl_header_id}
		</if>
		group by c.bus_number,c.test_node) tmp
     </select>
     
     <select id="queryProductRecordDetail" parameterType="Map" resultType="Map">
     	select d.test_item,d.test_standard,d.test_standard_no,d.test_request,d.is_null, c.bus_number,c.factory_id,c.test_node_id,c.test_node,c.order_id,c.order_config_id,
		c.result,c.test_card_template_head_id,c.test_card_template_detail_id,c.fault_id,c.test_result,c.result_judge,c.rework,c.tester,c.workshop_id,c.workgroup_id,c.memo,cast(c.test_image as char) test_image,
		d.id,d.test_card_template_id, w.workshop_name workshop,g.workgroup_name workgroup
		from BMS_QM_TEST_CARD_TEMPLATE_HEADER h 
		left join BMS_QM_TEST_CARD_TEMPLATE_DETAILS d on d.test_card_template_id=h.id
		left join BMS_QM_TEST_CARD c  on d.id=c.test_card_template_detail_id
		and c.bus_number= #{bus_number} and c.test_node=#{test_node} and c.factory_id=#{factory_id}
		left join BMS_BASE_WORKSHOP w on w.id=c.workshop_id
		left join BMS_BASE_STANDARD_WORKGROUP g on g.id=c.workgroup_id
		where h.id=#{test_card_template_head_id}
		order by cast(test_standard_no as signed)
     </select>
     
     <select id="queryBusByPartsBatch" parameterType="Map" resultType="Map">    	
		select a.*,f.factory_name,concat(o.order_no,' ',o.order_name,left(a.bus_number,LOCATE('-',a.bus_number)-1), ' ',o.order_qty,'台') order_desc
		from(
		select distinct  upper(p.bus_number) bus_number,p.factory_id,p.workshop,p.parts_name,p.batch,p.edit_date
		from BMS_QM_KEY_PARTS p
		where 1=1
		<if test="batch !=null and batch !=''">
			and p.batch=#{batch}
		</if>
		<if test="parts_name !=null and parts_name !=''">
			and p.parts_name like concat('%',#{parts_name},'%')
		</if>
        ) a
		left join BMS_BASE_FACTORY f on f.id=a.factory_id
		left join BMS_PLAN_BUS b on b.bus_number=a.bus_number
		left join BMS_OR_ORDER o on o.id=b.order_id
		order by a.bus_number
		<if test="start !=null">
			limit #{start},#{length}
		</if>
		
     </select>
     
     <select id="queryBusByPartsBatchCount" parameterType="Map" resultType="int">
     	select count(a.bus_number) from (
     	select distinct upper(p.bus_number) bus_number,p.factory_id,p.workshop,p.parts_name,p.batch
		from BMS_QM_KEY_PARTS p
		where 1=1
		<if test="batch !=null and batch !=''">
			and p.batch=#{batch}
		</if>
		<if test="parts_name !=null and parts_name !=''">
			and p.parts_name like concat('%',#{parts_name},'%')
		</if>
		) a
     </select>
<!-- ======================== xjw end=================================-->

<!-- ======================== yk start=================================-->
	<insert id="insertFaultLib" parameterType="com.byd.bms.quality.model.StdFaultLibBean" useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_STANDARD_FAULT_LIBRARY
		(bug_type,bug,serious_level,fault_type,workshop_name,workgroup_name,editor_id,edit_date)
		values(#{bugType},#{bug},#{faultLevel},#{faultType},#{workshop},#{workgroup},#{editorId},#{editDate})
	</insert>
	<update id="updateFaultLib" parameterType="com.byd.bms.quality.model.StdFaultLibBean">
		update BMS_QM_STANDARD_FAULT_LIBRARY
		<set>
			bug_type=#{bugType},bug=#{bug},serious_level=#{faultLevel},fault_type=#{faultType},workshop_name=#{workshop},
			workgroup_name=#{workgroup},editor_id=#{editorId},edit_date=#{editDate}
		</set>
		where id=#{id}
	</update>
	
	<update id="updateProblemImprove" parameterType="com.byd.bms.quality.model.ProblemImproveBean">
		update BMS_QM_IMPROVE_PROBLEM
		<set>
			fault_description = #{fault_description},factory_id = #{factory_id},
			vin = #{vin},license_number = #{license_number},fault_phenomenon = #{fault_phenomenon},fault_components = #{fault_components},
			fault_date = #{fault_date},bus_type = #{bus_type},fault_mils = #{fault_mils},fault_level_id = #{fault_level_id},
			response_workshop = #{response_workshop},fault_reason = #{fault_reason},resolve_method = #{resolve_method},
			resolve_date = #{resolve_date},risk_evaluate = #{risk_evaluate},keystone_attention = #{keystone_attention},
			fault_pic_path = #{fault_pic_path},8D_REPORT_PATH = #{eightD_report_path},close_evidenc_path = #{close_evidenc_path},
			is_closed = #{is_closed},memo = #{memo},editor_id = #{editor_id},edit_date = #{edit_date}
		</set>
		where id=#{id}
	</update>
	
	<select id="getTestingDate" parameterType="Map" resultType="int">
		select count(*) from ac_car_info
	</select>
	<select id="getTestingBusListCount" parameterType="Map" resultType="int">
		SELECT COUNT(B.vin) FROM BMS_PLAN_BUS B WHERE B.factory_id = #{factory_id} 
		<if test="order_no !=null and order_no !=''">
		AND B.order_id = (SELECT O.id FROM BMS_OR_ORDER O WHERE O.order_no = #{order_no})
		</if>
		<if test="bus_number !=null and bus_number !=''">
		AND B.bus_number = #{bus_number}
		</if>
		<if test="start_busNum !=null and start_busNum !=''">
		AND RIGHT(B.bus_number,4)+0 >= #{start_busNum}
		</if>
		<if test="end_busNum !=null and end_busNum !=''">
		<![CDATA[ AND RIGHT(B.bus_number,4)+0 <= #{end_busNum} ]]>
		</if> 
	</select>
	<select id="getTestingBusList" parameterType="Map" resultType="Map">
		SELECT B.vin,B.bus_number,RIGHT(B.bus_number,4) FROM BMS_PLAN_BUS B WHERE B.factory_id = #{factory_id} 
		<if test="order_no !=null and order_no !=''">
		AND B.order_id = (SELECT O.id FROM BMS_OR_ORDER O WHERE O.order_no = #{order_no})
		</if>
		<if test="bus_number !=null and bus_number !=''">
		AND B.bus_number = #{bus_number}
		</if>
		<if test="start_busNum !=null and start_busNum !=''">
		AND RIGHT(B.bus_number,4)+0 >= #{start_busNum}
		</if>
		<if test="end_busNum !=null and end_busNum !=''">
		<![CDATA[ AND RIGHT(B.bus_number,4)+0 <= #{end_busNum} ]]>
		</if> 
		ORDER BY B.bus_number
		<if test="start !=null">
			LIMIT #{start} ,#{length} 
		</if>
	</select>
	<select id="getBusTestingDate" parameterType="Map" resultType="Map">
		SELECT I.VID,I.VIN,I.LICENSE_NO,I.ENGINE_NO AS 'motor_number',I.FACTORY_TYPE AS 'bus_type',
		I.LICENSE_TYPE AS 'license_type',I.CAR_TYPE AS 'bus_vehicle_type',I.FUEL_TYPE AS 'fuel_type',
		I.UNDERPAN_TYPE AS 'chassis_model',I.UNDERPAN_NO AS 'chassis_number',
		B.CHECK_TYPE AS 'check_type',LEFT(CONVERT(varchar,B.DEBUT_DATE,20),10) AS 'register_date',LEFT(CONVERT(varchar,B.FINISH_DATE,20),10) AS 'manufacture_date',
		LEFT(CONVERT(varchar,B.CHECK_DATE,20),10) AS 'check_date',B.CHECK_NO AS 'check_number',B.CHECK_TIMES AS 'check_times',
		B.IF_PASSED AS 'is_passed',B.REMARK AS 'test_results',B.IF_PASSED_AJ AS 'is_passed_aj',
		C.SPDOMETER_VAL AS 'speed',C.SPDOMETER_ERR AS 'speed_mistake',
		D.S1_LFT_WGT_VAL AS 's1_lft_wgt_val',D.S1_RGT_WGT_VAL AS 's1_rgt_wgt_val',
		D.S1_TOT_WGT_VAL AS 's1_tot_wgt_val',D.S2_LFT_WGT_VAL AS 's2_lft_wgt_val',
		D.S2_RGT_WGT_VAL AS 's2_rgt_wgt_val',D.S2_TOT_WGT_VAL AS 's2_tot_wgt_val',
		D.WGT_CAL_VAL AS 'wgt_cal_val',D.TOT_WGT_VAL AS 'tot_wgt_val',D.S1_LFT_EFF_FRS_VAL AS 's1_lft_eff_frs_val',
		D.S1_RGT_EFF_FRS_VAL AS 's1_rgt_eff_frs_val',D.S1_EFF_PEC_VAL AS 's1_eff_pec_val',
		D.S1_LFT_EQU_FRS_VAL AS 's1_lft_equ_frs_val',D.S1_RGT_EQU_FRS_VAL AS 's1_rgt_equ_frs_val',
		D.S1_EQU_PEC_VAL AS 's1_equ_pec_val',D.S1_LFT_LAG_FRS_VAL AS 's1_lft_lag_frs_val',
		D.S1_LFT_LAG_PEC_VAL AS 's1_lft_lag_pec_val',D.S1_RGT_LAG_FRS_VAL AS 's1_rgt_lag_frs_val',
		D.S1_RGT_LAG_PEC_VAL AS 's1_rgt_lag_pec_val',D.S1_COORD_VAL AS 's1_coord_val',
		D.S2_LFT_EFF_FRS_VAL AS 's2_lft_eff_frs_val',D.S2_RGT_EFF_FRS_VAL AS 's2_rgt_eff_frs_val',
		D.S2_EFF_PEC_VAL AS 's2_eff_pec_val',D.S2_LFT_EQU_FRS_VAL AS 's2_lft_equ_frs_val',
		D.S2_RGT_EQU_FRS_VAL AS 's2_rgt_equ_frs_val',D.S2_EQU_PEC_VAL AS 's2_equ_pec_val',
		D.S2_LFT_LAG_FRS_VAL AS 's2_lft_lag_frs_val',D.S2_LFT_LAG_PEC_VAL AS 's2_lft_lag_pec_val',
		D.S2_RGT_LAG_FRS_VAL AS 's2_rgt_lag_frs_val',D.S2_RGT_LAG_PEC_VAL AS 's2_rgt_lag_pec_val',
		D.S2_COORD_VAL AS 's2_coord_val',D.PARK_LFT_EFF_FRS_VAL AS 'park_lft_eff_frs_val',
		D.PARK_RGT_EFF_FRS_VAL AS 'park_rgt_eff_frs_val',D.PARK_EFF_PEC_VAL AS 'park_eff_pec_val',
		D.TOT_EFF_FRS_VAL AS 'tot_eff_frs_val',D.TOT_EFF_PEC_VAL AS 'tot_eff_pec_val',
		
		B.CHECK_NO AS 'check_no',
		E.RHB_LIGHT_STD AS 'rhb_light_std',E.RHB_LIGHT_JUS AS 'rhb_light_jus',
		E.LHB_LIGHT_STD AS 'lhb_light_std',E.LHB_LIGHT_JUS AS 'lhb_light_jus',
		E.LHB_UDOBS_STD AS 'lhb_udobs_std',E.LHB_UDOFF_JUS AS 'lhb_udoff_jus',E.LHB_UDOFF_VAL AS 'lhb_udoff_val',
		E.RHB_UDOBS_STD AS 'rhb_udobs_std',E.RHB_UDOFF_JUS AS 'rhb_udoff_jus',E.RHB_UDOFF_VAL AS 'rhb_udoff_val',
		E.LHB_LROFF_STD AS 'lhb_lroff_std',E.LHB_LROFF_JUS AS 'lhb_lroff_jus',
		E.RHB_LROFF_STD AS 'rhb_lroff_std',E.RHB_LROFF_JUS AS 'rhb_lroff_jus',
		E.LDB_LROFF_STD AS 'ldb_lroff_std',E.LDB_LROFF_JUS AS 'ldb_lroff_jus',
		E.RDB_LROFF_STD AS 'rdb_lroff_std',E.RDB_LROFF_JUS AS 'rdb_lroff_jus',
		E.LDB_UDOBS_STD AS 'ldb_udobs_std',E.LDB_UDOFF_JUS AS 'ldb_udoff_jus',E.LDB_UDOFF_VAL AS 'ldb_udoff_val',
		E.RDB_UDOBS_STD AS 'rdb_udobs_std',E.RDB_UDOFF_JUS AS 'rdb_udoff_jus',E.RDB_UDOFF_VAL AS 'rdb_udoff_val',
		
		E.LHB_LIGHT_VAL AS 'lhb_light_val',E.RHB_LIGHT_VAL AS 'rhb_light_val',E.LHB_HEIGHT_VAL AS 'lhb_height_val',
		E.RHB_HEIGHT_VAL AS 'rhb_height_val',E.LHB_LROFF_VAL AS 'lhb_lroff_val',
		E.LHB_UDOBS_VAL AS 'lhb_udobs_val',E.LDB_LROFF_VAL AS 'ldb_lroff_val',E.LDB_UDOBS_VAL AS 'ldb_udobs_val',
		E.RHB_LROFF_VAL AS 'rhb_lroff_val',E.RHB_UDOBS_VAL AS 'rhb_udobs_val',E.RDB_LROFF_VAL AS 'rdb_lroff_val',
		E.RDB_UDOBS_VAL AS 'rdb_udobs_val',F.HORN_SOUND_VAL AS 'horn_level',G.SIDE_SLIDE_VAL AS 'side_slide_val'
		
		FROM AC_CAR_INFO I,AC_DATA_BASE B,AC_DATA_SPEED C,AC_DATA_BRAKES D,AC_DATA_LAMP E,AC_DATA_NOISE F,AC_DATA_STEER G
		WHERE I.VIN = #{vin} AND I.VID = B.VID AND B.TID = (SELECT MAX(TID) FROM AC_DATA_BASE WHERE VID = B.VID)
		AND C.TID = B.TID AND D.TID = B.TID AND E.TID = B.TID AND F.TID = B.TID AND G.TID = B.TID
	</select>
	
	<select id="getBusTestingDateWH" parameterType="Map" resultType="Map">
	SELECT I.VIN,I.ManufactureCountry AS 'LICENSE_NO' ,I.EngineNumber AS 'motor_number',I.Model AS 'bus_type',
	'大型汽车' AS 'license_type',I.VehType AS 'bus_vehicle_type',I.FuelTypeCode AS 'fuel_type',
	I.ChassisModel AS 'chassis_model', I.ChassisNumber AS 'chassis_number',
	I.UsePhase AS 'check_type',CONVERT(varchar(100), B.EnTryTime, 23) AS 'register_date',
	CONVERT(varchar(100), B.EnTryTime, 23) AS 'manufacture_date',
	CONVERT(varchar(100), B.UpdateStatusTime, 23) AS 'check_date',B.ReportNumber AS 'check_number',
	'' AS 'check_times','is_passed' = case B.VehJudge WHEN '0' THEN '合格' ELSE '不合格' end,
	'' AS 'test_results','' AS 'is_passed_aj',CAST(C.MeasuredValue as numeric(6,2)) AS 'speed',CAST(C.IndicationError as numeric(6,2)) AS 'speed_mistake',
	CAST(D.Axle1LStatload as numeric(6,2)) AS 's1_lft_wgt_val',CAST(D.Axle1RStatload as numeric(6,2)) AS 's1_rgt_wgt_val',
	'' AS 's1_tot_wgt_val',CAST(D.Axle2LStatload as numeric(6,2)) AS 's2_lft_wgt_val',CAST(D.Axle2RStatload as numeric(6,2)) AS 's2_rgt_wgt_val',
	'' AS 's2_tot_wgt_val','' AS 'wgt_cal_val',D.VehLoad AS 'tot_wgt_val',
	E.Axle1LSumsbforce AS 's1_lft_eff_frs_val',E.Axle1RSumsbforce AS 's1_rgt_eff_frs_val',
	CAST(E.Axle1SBRate as numeric(6,2)) AS 's1_eff_pec_val',E.Axle1LSubsbforce AS 's1_lft_equ_frs_val',
	E.Axle1RSubsbforce AS 's1_rgt_equ_frs_val',CAST(E.Axle1UnbRate as numeric(6,2)) AS 's1_equ_pec_val',E.Axle1LBlkForce AS 's1_lft_lag_frs_val',
	CAST(E.Axle1LBlkRate as numeric(6,2)) AS 's1_lft_lag_pec_val', --一轴左轮阻滞比
	CAST(E.Axle1RBlkForce as numeric(6,2)) AS 's1_rgt_lag_frs_val',
	CAST(E.Axle1RBlkRate as numeric(6,2)) AS 's1_rgt_lag_pec_val', --一轴右轮阻滞比
	'' AS 's1_coord_val', E.Axle2LSumsbforce AS 's2_lft_eff_frs_val',E.Axle2RSumsbforce AS 's2_rgt_eff_frs_val',
	E.Axle2SBRate AS 's2_eff_pec_val',E.Axle2LSubsbforce AS 's2_lft_equ_frs_val',
	E.Axle2RSubsbforce AS 's2_rgt_equ_frs_val',CAST(E.Axle2UnbRate as numeric(6,2)) AS 's2_equ_pec_val',
	E.Axle2LBlkForce AS 's2_lft_lag_frs_val',
	CAST(E.Axle2LBlkRate as numeric(6,2)) AS 's2_lft_lag_pec_val',  --二轴左轮阻滞比
	E.Axle2RBlkForce AS 's2_rgt_lag_frs_val',
	CAST(E.Axle2RBlkRate as numeric(6,2)) AS 's2_rgt_lag_pec_val',  --二轴右轮阻滞比
	'' AS 's2_coord_val',E.Axle2LPBForce AS 'park_lft_eff_frs_val',E.Axle2RPBForce AS 'park_rgt_eff_frs_val',
	CAST(E.VehPBRate as numeric(6,2)) AS 'park_eff_pec_val',E.VehSumSBForce AS 'tot_eff_frs_val',CAST(E.VehSBRate as numeric(6,2)) AS 'tot_eff_pec_val',B.RunningNumber AS 'check_no',
	
	'18000' AS 'rhb_light_std','' AS 'rhb_light_jus',
	'18000' AS 'lhb_light_std','' AS 'lhb_light_jus',
	'下114~上100' AS 'lhb_udobs_std','1' AS 'lhb_udoff_jus',CAST(F.LMaHHeightRatio as numeric(6,2)) AS 'lhb_udoff_val',
	'下112~上100' AS 'rhb_udobs_std','1' AS 'rhb_udoff_jus',CAST(F.RMaHHeightRatio as numeric(6,2)) AS 'rhb_udoff_val',
	'-170~350' AS 'lhb_lroff_std','' AS 'lhb_lroff_jus',
	'-170~350' AS 'rhb_lroff_std','' AS 'rhb_lroff_jus',
	'-170~350' AS 'ldb_lroff_std','' AS 'ldb_lroff_jus',
	'-170~350' AS 'rdb_lroff_std','' AS 'rdb_lroff_jus',
	'下50~下300' AS 'ldb_udobs_std','1' AS 'ldb_udoff_jus',CAST(F.LLHeightRatio as numeric(6,2)) AS 'ldb_udoff_val',
	'下50~下300' AS 'rdb_udobs_std','1' AS 'rdb_udoff_jus',CAST(F.RLHeightRatio as numeric(6,2)) AS 'rdb_udoff_val',

	F.LMaHIntensity AS 'lhb_light_val',F.RMaHIntensity AS 'rhb_light_val',F.LeftLightHeight AS 'lhb_height_val',
	F.RightLightHeight AS 'rhb_height_val',CAST(F.LMaHHO as numeric(6,2)) AS 'lhb_lroff_val',
	-- cast(ROUND(F.LMaHVO/F.LMaHHeightRatio,2) as numeric(6,2)) AS 'lhb_udobs_val',
	CAST(F.LMaHVO as numeric(6,2)) AS 'lhb_udobs_val',
	CAST(F.LLHO as numeric(6,2)) AS 'ldb_lroff_val',
	-- cast(ROUND(F.LLVO /F.LLHeightRatio,2) as numeric(6,2)) AS 'ldb_udobs_val',
	CAST(F.LLVO as numeric(6,2)) AS 'ldb_udobs_val',
	
	CAST(F.RMaHHO as numeric(6,2)) AS 'rhb_lroff_val',
	
	-- cast(ROUND(F.RMaHVO/F.RMaHHeightRatio,2) as numeric(6,2)) AS 'rhb_udobs_val',
	CAST(F.RMaHVO as numeric(6,2)) AS 'rhb_udobs_val',
	
	CAST(F.RLHO as numeric(6,2)) AS 'rdb_lroff_val', 
	CAST(F.RLVO as numeric(6,2)) AS 'rdb_udobs_val',
	CAST(G.MeasuredValue as numeric(6,2)) AS 'horn_level',H.SideslipValue AS 'side_slide_val'
	
	FROM VehInfo I ,DetLog B,SpeedometerData C ,AxleLoadData D,BrakeData E,HeadLightData F,SpeakerData G,SteerabilityData H
	WHERE I.VIN = #{vin} AND I.VIN = B.VIN 
	AND B.RunningNumber = (SELECT MAX(RunningNumber) FROM DetLog WHERE VIN=I.VIN)
	AND B.RunningNumber = C.RunningNumber AND B.RunningNumber = D.RunningNumber AND B.RunningNumber = E.RunningNumber
	AND B.RunningNumber = F.RunningNumber AND B.RunningNumber = G.RunningNumber AND B.RunningNumber = H.RunningNumber
	</select>
	
	<select id="checkJcxBusInfoId" parameterType="Map" resultType="int">
		SELECT COUNT(id) FROM JCX_BUS_INFO WHERE vin = #{vin}
	</select>
	<insert id="insertJcxBusInfo" parameterType="Map" useGeneratedKeys="true" keyProperty="id">
	INSERT INTO JCX_BUS_INFO (
	check_no,bus_number,vin,factory_id,motor_number,bus_type,license_type,bus_vehicle_type,fuel_type,chassis_number,chassis_model,
	check_type,register_date,manufacture_date,check_date,check_number,check_times,is_passed,test_results,
	is_passed_aj,speed,speed_mistake,s1_lft_wgt_val,s1_rgt_wgt_val,s1_tot_wgt_val,s2_lft_wgt_val,s2_rgt_wgt_val,
	s2_tot_wgt_val,wgt_cal_val,tot_wgt_val,s1_lft_eff_frs_val,s1_rgt_eff_frs_val,s1_eff_pec_val,s1_lft_equ_frs_val,s1_rgt_equ_frs_val,
	s1_equ_pec_val,s1_lft_lag_frs_val,s1_lft_lag_pec_val,s1_rgt_lag_frs_val,s1_rgt_lag_pec_val,s1_coord_val,s2_lft_eff_frs_val,s2_rgt_eff_frs_val,
	s2_eff_pec_val,s2_lft_equ_frs_val,s2_rgt_equ_frs_val,s2_equ_pec_val,s2_lft_lag_frs_val,s2_lft_lag_pec_val,s2_rgt_lag_frs_val,s2_rgt_lag_pec_val,
	s2_coord_val,park_lft_eff_frs_val,park_rgt_eff_frs_val,park_eff_pec_val,tot_eff_frs_val,tot_eff_pec_val,
	lhb_light_val,rhb_light_val,lhb_height_val,rhb_height_val,lhb_lroff_val,lhb_udobs_val,ldb_lroff_val,
	ldb_udobs_val,rhb_lroff_val,rhb_udobs_val,rdb_lroff_val,rdb_udobs_val,horn_level,side_slide_val,
	
	rhb_light_std,rhb_light_jus,lhb_light_std,lhb_light_jus,lhb_udobs_std,lhb_udoff_jus,lhb_udoff_val,
	rhb_udobs_std,rhb_udoff_jus,rhb_udoff_val,lhb_lroff_std,lhb_lroff_jus,rhb_lroff_std,rhb_lroff_jus,
	ldb_lroff_std,ldb_lroff_jus,rdb_lroff_std,rdb_lroff_jus,ldb_udobs_std,ldb_udoff_jus,ldb_udoff_val,
	rdb_udobs_std,rdb_udoff_jus,rdb_udoff_val
	
	)
	VALUES(
	#{check_no},#{LICENSE_NO},#{VIN},#{factory_id},#{motor_number},#{bus_type},#{license_type},#{bus_vehicle_type},#{fuel_type},#{chassis_number},#{chassis_model},
	#{check_type},#{register_date},#{manufacture_date},#{check_date},#{check_number},#{check_times},#{is_passed},#{test_results},
	#{is_passed_aj},#{speed},#{speed_mistake},#{s1_lft_wgt_val},#{s1_rgt_wgt_val},#{s1_tot_wgt_val},#{s2_lft_wgt_val},#{s2_rgt_wgt_val},
	#{s2_tot_wgt_val},#{wgt_cal_val},#{tot_wgt_val},#{s1_lft_eff_frs_val},#{s1_rgt_eff_frs_val},#{s1_eff_pec_val},#{s1_lft_equ_frs_val},#{s1_rgt_equ_frs_val},
	#{s1_equ_pec_val},#{s1_lft_lag_frs_val},#{s1_lft_lag_pec_val},#{s1_rgt_lag_frs_val},#{s1_rgt_lag_pec_val},#{s1_coord_val},#{s2_lft_eff_frs_val},#{s2_rgt_eff_frs_val},
	#{s2_eff_pec_val},#{s2_lft_equ_frs_val},#{s2_rgt_equ_frs_val},#{s2_equ_pec_val},#{s2_lft_lag_frs_val},#{s2_lft_lag_pec_val},#{s2_rgt_lag_frs_val},#{s2_rgt_lag_pec_val},
	#{s2_coord_val},#{park_lft_eff_frs_val},#{park_rgt_eff_frs_val},#{park_eff_pec_val},#{tot_eff_frs_val},#{tot_eff_pec_val},
	#{lhb_light_val},#{rhb_light_val},#{lhb_height_val},#{rhb_height_val},#{lhb_lroff_val},#{lhb_udobs_val},#{ldb_lroff_val},
	#{ldb_udobs_val},#{rhb_lroff_val},#{rhb_udobs_val},#{rdb_lroff_val},#{rdb_udobs_val},#{horn_level},#{side_slide_val},
	
	#{rhb_light_std},#{rhb_light_jus},#{lhb_light_std},#{lhb_light_jus},#{lhb_udobs_std},#{lhb_udoff_jus},#{lhb_udoff_val},
	#{rhb_udobs_std},#{rhb_udoff_jus},#{rhb_udoff_val},#{lhb_lroff_std},#{lhb_lroff_jus},#{rhb_lroff_std},#{rhb_lroff_jus},
	#{ldb_lroff_std},#{ldb_lroff_jus},#{rdb_lroff_std},#{rdb_lroff_jus},#{ldb_udobs_std},#{ldb_udoff_jus},#{ldb_udoff_val},
	#{rdb_udobs_std},#{rdb_udoff_jus},#{rdb_udoff_val}
	
	)
	</insert>
	<update id="updateJcxBusInfo" parameterType="Map">
	UPDATE JCX_BUS_INFO
	SET motor_number=#{motor_number},factory_id=#{factory_id}, bus_type=#{bus_type}, license_type=#{license_type}, bus_vehicle_type=#{bus_vehicle_type}, 
	fuel_type=#{fuel_type}, chassis_number=#{chassis_number}, chassis_model=#{chassis_model}, check_type=#{check_type}, 
	register_date=#{register_date}, manufacture_date=#{manufacture_date}, check_date=#{check_date}, check_number=#{check_number}, 
	check_times=#{check_times}, is_passed=#{is_passed}, test_results=#{test_results}, is_passed_aj=#{is_passed_aj}, speed=#{speed}, 
	speed_mistake=#{speed_mistake}, s1_lft_wgt_val=#{s1_lft_wgt_val}, s1_rgt_wgt_val=#{s1_rgt_wgt_val}, s1_tot_wgt_val=#{s1_tot_wgt_val}, 
	s2_lft_wgt_val=#{s2_lft_wgt_val}, s2_rgt_wgt_val=#{s2_rgt_wgt_val}, s2_tot_wgt_val=#{s2_tot_wgt_val}, wgt_cal_val=#{wgt_cal_val}, 
	tot_wgt_val=#{tot_wgt_val}, s1_lft_eff_frs_val=#{s1_lft_eff_frs_val}, s1_rgt_eff_frs_val=#{s1_rgt_eff_frs_val}, s1_eff_pec_val=#{s1_eff_pec_val}, 
	s1_lft_equ_frs_val=#{s1_lft_equ_frs_val}, s1_rgt_equ_frs_val=#{s1_rgt_equ_frs_val}, s1_equ_pec_val=#{s1_equ_pec_val}, 
	s1_lft_lag_frs_val=#{s1_lft_lag_frs_val}, s1_lft_lag_pec_val=#{s1_lft_lag_pec_val}, s1_rgt_lag_frs_val=#{s1_rgt_lag_frs_val}, 
	s1_rgt_lag_pec_val=#{s1_rgt_lag_pec_val}, s1_coord_val=#{s1_coord_val}, s2_lft_eff_frs_val=#{s2_lft_eff_frs_val}, 
	s2_rgt_eff_frs_val=#{s2_rgt_eff_frs_val}, s2_eff_pec_val=#{s2_eff_pec_val}, s2_lft_equ_frs_val=#{s2_lft_equ_frs_val}, 
	s2_rgt_equ_frs_val=#{s2_rgt_equ_frs_val}, s2_equ_pec_val=#{s2_equ_pec_val}, s2_lft_lag_frs_val=#{s2_lft_lag_frs_val}, 
	s2_lft_lag_pec_val=#{s2_lft_lag_pec_val}, s2_rgt_lag_frs_val=#{s2_rgt_lag_frs_val}, s2_rgt_lag_pec_val=#{s2_rgt_lag_pec_val}, 
	s2_coord_val=#{s2_coord_val}, park_lft_eff_frs_val=#{park_lft_eff_frs_val}, park_rgt_eff_frs_val=#{park_rgt_eff_frs_val}, 
	park_eff_pec_val=#{park_eff_pec_val}, tot_eff_frs_val=#{tot_eff_frs_val}, tot_eff_pec_val=#{tot_eff_pec_val},
	lhb_light_val=#{lhb_light_val},rhb_light_val=#{rhb_light_val},lhb_height_val=#{lhb_height_val},
	rhb_height_val=#{rhb_height_val},lhb_lroff_val=#{lhb_lroff_val},lhb_udobs_val=#{lhb_udobs_val},ldb_lroff_val=#{ldb_lroff_val},
	ldb_udobs_val=#{ldb_udobs_val},rhb_lroff_val=#{rhb_lroff_val},rhb_udobs_val=#{rhb_udobs_val},
	rdb_lroff_val=#{rdb_lroff_val},rdb_udobs_val=#{rdb_udobs_val},horn_level=#{horn_level},side_slide_val=#{side_slide_val},
	
	check_no=#{check_no},rhb_light_std=#{rhb_light_std},rhb_light_jus=#{rhb_light_jus},lhb_light_std=#{lhb_light_std},
	lhb_light_jus=#{lhb_light_jus},lhb_udobs_std=#{lhb_udobs_std},lhb_udoff_jus=#{lhb_udoff_jus},lhb_udoff_val=#{lhb_udoff_val},
	rhb_udobs_std=#{rhb_udobs_std},rhb_udoff_jus=#{rhb_udoff_jus},rhb_udoff_val=#{rhb_udoff_val},lhb_lroff_std=#{lhb_lroff_std},
	lhb_lroff_jus=#{lhb_lroff_jus},rhb_lroff_std=#{rhb_lroff_std},rhb_lroff_jus=#{rhb_lroff_jus},
	ldb_lroff_std=#{ldb_lroff_std},ldb_lroff_jus=#{ldb_lroff_jus},rdb_lroff_std=#{rdb_lroff_std},
	rdb_lroff_jus=#{rdb_lroff_jus},ldb_udobs_std=#{ldb_udobs_std},ldb_udoff_jus=#{ldb_udoff_jus},ldb_udoff_val=#{ldb_udoff_val},
	rdb_udobs_std=#{rdb_udobs_std},rdb_udoff_jus=#{rdb_udoff_jus},rdb_udoff_val=#{rdb_udoff_val}
	
	WHERE vin=#{VIN}
	</update>
	
	<select id="getProcessFaultOrderReportData" parameterType="Map" resultType="Map">
	SELECT COUNT(*) AS fault_level_count,fault_level_id FROM BMS_QM_PROCESS_PROBLEM
	WHERE fault_date >= #{start_date} 
	<![CDATA[ AND fault_date <= #{end_date} ]]>
	GROUP BY fault_level_id
	</select>
	<select id="getProcessFaultOrderReportData2" parameterType="Map" resultType="Map">
	SELECT COUNT(*) AS is_batch_count, IF(is_batch ='1','批量','非批量') AS is_batch FROM BMS_QM_PROCESS_PROBLEM
	WHERE fault_date >= #{start_date} 
	<![CDATA[ AND fault_date <= #{end_date} ]]>
	GROUP BY is_batch
	</select>
	
	<select id="getOrderFaultReportList" parameterType="Map" resultType="Map">
	SELECT a.order_desc,a.order_qty,a.p_count,
	CONCAT(ROUND(a.p_count/a.order_qty*100,2),'%') AS p_rate,
	a.factory_name,a.production_qty,a.pf_count,CONCAT(ROUND(a.pf_count/a.production_qty*100,2),'%') AS pf_rate from (
	select CONCAT(o.order_no,' ',o.order_name,t.bus_type_code,' ',o.order_qty,'台') AS order_desc,o.order_qty
	,(SELECT COUNT(*) FROM BMS_QM_PROCESS_PROBLEM p WHERE p.order_no = o.order_no
	AND p.fault_date >= #{start_date}
	<![CDATA[ AND fault_date <= #{end_date} ]]>
	) AS p_count
	
	,f.factory_name,fo.production_qty
	,(SELECT COUNT(*) FROM BMS_QM_PROCESS_PROBLEM p LEFT JOIN BMS_PLAN_BUS b ON p.vin = b.vin
	WHERE p.order_no = o.order_no AND p.factory_id = fo.factory_id AND b.factory_order_id = fo.id
	AND p.fault_date >= #{start_date}
	<![CDATA[ AND fault_date <= #{end_date} ]]>
	) AS pf_count
	
	from BMS_OR_ORDER o
	left join BMS_BASE_BUS_TYPE t on o.bus_type_id=t.id
	left join BMS_OR_FACTORY_ORDER fo on fo.order_id=o.id
	left join BMS_BASE_FACTORY f on fo.factory_id=f.id
	) a WHERE a.p_count >0 ORDER BY a.p_count/a.order_qty DESC
	</select>
	
	<select id="getProcessFaultReportData" parameterType="Map" resultType="Map">
	<if test="report_type == 1">
	SELECT f.factory_name AS plant_org,IFNULL(t.fault_count,0) AS fault_count FROM BMS_BASE_FACTORY f 
	LEFT JOIN (
		SELECT COUNT(*) AS fault_count,
		<if test="report_type == 1">
		f.factory_name AS plant_org 
		</if>
		<if test="report_type == 2">
		p.processFaultArea AS plant_org 
		</if>
		<if test="report_type == 3">
		t.bus_type_code AS plant_org 
		</if>
		FROM BMS_QM_PROCESS_PROBLEM p
		LEFT JOIN BMS_BASE_FACTORY f ON p.factory_id = f.id
		LEFT JOIN BMS_BASE_BUS_TYPE t ON p.bus_type = t.id
		WHERE f.factory_name IS NOT NULL 
		<if test="start_date !=null and start_date !=''">
		AND p.fault_date >= #{start_date}
		</if>
		<if test="end_date !=null and end_date !=''">
		<![CDATA[ AND p.fault_date <= #{end_date} ]]>
		</if>
		<if test="report_type == 1">
		GROUP BY f.factory_name
		</if>
		<if test="report_type == 2">
		GROUP BY p.processFaultArea
		</if>
		<if test="report_type == 3">
		GROUP BY t.bus_type_code
		</if>
	) t ON f.factory_name = t.plant_org 
	ORDER BY fault_count DESC
	</if>
	<if test="report_type != 1">
		SELECT COUNT(*) AS fault_count,
		<if test="report_type == 1">
		f.factory_name AS plant_org 
		</if>
		<if test="report_type == 2">
		p.processFaultArea AS plant_org 
		</if>
		<if test="report_type == 3">
		t.bus_type_code AS plant_org 
		</if>
		FROM BMS_QM_PROCESS_PROBLEM p
		LEFT JOIN BMS_BASE_FACTORY f ON p.factory_id = f.id
		LEFT JOIN BMS_BASE_BUS_TYPE t ON p.bus_type = t.id
		WHERE f.factory_name IS NOT NULL 
		<if test="start_date !=null and start_date !=''">
		AND p.fault_date >= #{start_date}
		</if>
		<if test="end_date !=null and end_date !=''">
		<![CDATA[ AND p.fault_date <= #{end_date} ]]>
		</if>
		<if test="report_type == 1">
		GROUP BY f.factory_name
		</if>
		<if test="report_type == 2">
		GROUP BY p.processFaultArea
		</if>
		<if test="report_type == 3">
		GROUP BY t.bus_type_code
		</if>
		ORDER BY fault_count DESC
	</if>
	</select>
	
	<select id="getFactoryIdByVin" parameterType="Map" resultType="Map">
	SELECT b.vin,b.factory_id,o.bus_type_id,o.order_no,f.area, 
	CONCAT(o.order_name,t.bus_type_code,'  ',o.order_qty,'台') AS 'order_describe'
	FROM BMS_PD_VIN b
	LEFT JOIN BMS_BASE_FACTORY f ON b.factory_id = f.id
	LEFT JOIN  BMS_OR_ORDER o ON b.order_id = o.id
	LEFT JOIN BMS_BASE_BUS_TYPE t ON o.bus_type_id = t.id 
	WHERE b.vin = #{vin}
	</select>
	
	<select id="getProcessFaultArea" resultType="Map">
	SELECT key_name FROM BMS_BASE_KEY WHERE key_code = 'PROCESS_FAULT_AREA' AND delete_flag = 0
	</select>
	
	<select id="getKeyPartsInfo" parameterType="Map" resultType="Map">
	<![CDATA[
	SELECT P.bus_number,CONCAT(O.order_no,'<br/>',O.order_name,T.bus_type_code,'  ',O.order_qty,'台') as order_no,F.factory_name,
	F.area,B.vin,B.warehousing_date,O.productive_year,B.left_motor_number,B.right_motor_number,
	CONCAT(GROUP_CONCAT(CONCAT(P.parts_name,'(',P.parts_no,') 批次：',IFNULL(P.batch,'/'),';<br/><hr/>') separator ''))
	AS part_info
	FROM BMS_QM_KEY_PARTS P
	LEFT JOIN BMS_PLAN_BUS B ON P.bus_number = B.bus_number
	LEFT JOIN BMS_BASE_FACTORY F ON P.factory_id = F.id
	LEFT JOIN BMS_OR_ORDER O ON B.order_id = O.id
	LEFT JOIN BMS_BASE_BUS_TYPE T ON O.bus_type_id=T.id
	WHERE 1=1 
	]]>
	<if test="factory_id !=null and factory_id !=''">
	AND P.factory_id = #{factory_id}
	</if>
	<if test="year !=null and year !=''">
	AND O.productive_year = #{year}
	</if>
	<if test="motor !=null and motor !=''">
	AND (B.left_motor_number = #{motor} OR B.right_motor_number = #{motor})
	</if>
	<if test="parts_no !=null and parts_no !=''">
	AND P.batch = #{parts_no}
	</if>
	<if test="date_start !=null and date_start !=''">
	AND B.warehousing_date >= CONCAT(#{date_start},' 00:00:00')
	</if>
	<if test="date_end !=null and date_end !=''">
	<![CDATA[ AND B.warehousing_date <= CONCAT(#{date_end},' 23:59:59') ]]>
	</if>
	
	<if test="bus_number !=null and bus_number !=''">
	AND (P.bus_number = #{bus_number} OR P.bus_number = (SELECT B.bus_number FROM BMS_PLAN_BUS B WHERE B.VIN = #{bus_number}))
	</if>
	<if test="order_no !=null and order_no !=''">
	AND O.order_no = #{order_no}
	</if>
	AND P.parts_name LIKE '%动力电池%'
	GROUP BY P.bus_number
	<if test="start !=null">
		LIMIT #{start} ,#{length} 
	</if>
	</select>
	<select id="getKeyPartsCount" parameterType="Map" resultType="int">
	SELECT COUNT(DISTINCT P.bus_number) AS bus_count
	FROM BMS_QM_KEY_PARTS P
	LEFT JOIN BMS_PLAN_BUS B ON P.bus_number = B.bus_number
	LEFT JOIN BMS_BASE_FACTORY F ON P.factory_id = F.id
	LEFT JOIN BMS_OR_ORDER O ON B.order_id = O.id
	WHERE 1=1 
	<if test="factory_id !=null and factory_id !=''">
	AND P.factory_id = #{factory_id}
	</if>
	<if test="year !=null and year !=''">
	AND O.productive_year = #{year}
	</if>
	<if test="motor !=null and motor !=''">
	AND (B.left_motor_number = #{motor} OR B.right_motor_number = #{motor})
	</if>
	<if test="parts_no !=null and parts_no !=''">
	AND P.batch = #{parts_no}
	</if>
	<if test="date_start !=null and date_start !=''">
	AND B.warehousing_date >= CONCAT(#{date_start},' 00:00:00')
	</if>
	<if test="date_end !=null and date_end !=''">
	<![CDATA[ AND B.warehousing_date <= CONCAT(#{date_end},' 23:59:59') ]]>
	</if>
	<if test="bus_number !=null and bus_number !=''">
	AND (P.bus_number = #{bus_number} OR P.bus_number = (SELECT B.bus_number FROM BMS_PLAN_BUS B WHERE B.VIN = #{bus_number}))
	</if>
	<if test="order_no !=null and order_no !=''">
	AND O.order_no = #{order_no}
	</if>
	AND P.parts_name LIKE '%动力电池%'
	</select>
	
	<select id="getBusTestingInfo" parameterType="Map" resultType="Map">
	SELECT * FROM JCX_BUS_INFO WHERE vin = #{vin}
	</select>
	
	<select id="getBusTestingDateReport" parameterType="Map" resultType="Map">
		SELECT I.* FROM JCX_BUS_INFO I 
		LEFT OUTER JOIN bms.BMS_PLAN_BUS B ON I.vin = B.vin
		WHERE 1=1 
		<if test="factory_id !=null and factory_id !=''">
		AND I.factory_id=#{factory_id}
		</if>
		<if test="vin !=null and vin !=''">
		AND (I.vin LIKE CONCAT('%',#{vin},'%') OR I.bus_number LIKE CONCAT('%',#{vin},'%'))
		</if>
		<if test="isPassed !=null and isPassed !=''">
		AND I.is_passed=#{isPassed}
		</if>
		<if test="bus_type !=null and bus_type !=''">
		AND I.bus_type=#{bus_type}
		</if>
		<if test="order_id !=null and order_id !=''">
		AND B.order_id=#{order_id}
		</if>
		<if test="start_busNum !=null and start_busNum !=''">
		AND RIGHT(I.bus_number,5)+0 >= #{start_busNum}
		</if>
		<if test="end_busNum !=null and end_busNum !=''">
		<![CDATA[ AND RIGHT(I.bus_number,5)+0 <= #{end_busNum} ]]>
		</if> 
		<if test="date_start !=null and date_start !=''">
		AND I.register_date >= #{date_start}
		</if>
		<if test="end_busNum !=null and end_busNum !=''">
		<![CDATA[ AND I.register_date <= #{date_end} ]]>
		</if> 
		<if test="start !=null">
			LIMIT #{start} ,#{length} 
		</if>
	</select>
	<select id="getBusTestingDateReportCount" parameterType="Map" resultType="int">
		SELECT COUNT(I.id) FROM JCX_BUS_INFO I
		LEFT OUTER JOIN bms.BMS_PLAN_BUS B ON I.vin = B.vin
		WHERE 1=1 
		<if test="factory_id !=null and factory_id !=''">
		AND I.factory_id=#{factory_id}
		</if>
		<if test="vin !=null and vin !=''">
		AND (I.vin LIKE CONCAT('%',#{vin},'%') OR I.bus_number LIKE CONCAT('%',#{vin},'%'))
		</if>
		<if test="isPassed !=null and isPassed !=''">
		AND I.is_passed=#{isPassed}
		</if>
		<if test="bus_type !=null and bus_type !=''">
		AND I.bus_type=#{bus_type}
		</if>
		<if test="order_id !=null and order_id !=''">
		AND B.order_id=#{order_id}
		</if>
		<if test="start_busNum !=null and start_busNum !=''">
		AND RIGHT(I.bus_number,4)+0 >= #{start_busNum}
		</if>
		<if test="end_busNum !=null and end_busNum !=''">
		<![CDATA[ AND RIGHT(I.bus_number,4)+0 <= #{end_busNum} ]]>
		</if> 
		<if test="date_start !=null and date_start !=''">
		AND I.register_date >= #{date_start}
		</if>
		<if test="end_busNum !=null and end_busNum !=''">
		<![CDATA[ AND I.register_date <= #{date_end} ]]>
		</if> 
	</select>
	
	<select id="getQualityTargetList" parameterType="Map" resultType="Map">
		select
		p.id,p.factory_id,f.factory_name,p.workshop_id,w.workshop_name,p.target_type
		target_type_id,k.key_name target_type,p.target_value,
		p.estart_date,p.eend_date,p.editor_id,u.display_name AS username,p.edit_date,p.status
		from BMS_QM_QUALITY_TARGET_PARAMETER p 
		left join BMS_BASE_USER u on p.editor_id=u.id
		left join BMS_BASE_FACTORY f on p.factory_id=f.id
		left join BMS_BASE_WORKSHOP w on p.workshop_id=w.id
		left join BMS_BASE_KEY k on p.target_type=k.id
		where p.status='0'
		<if test="factoryId!=null and factoryId!=0">
			and p.factory_id=#{factoryId}
		</if>
		<if test="workshopId!=null and  workshopId!=0">
			and p.workshop_id=#{workshopId}
		</if>
		<if test="targetTypeId!=null and  targetTypeId!=0">
			and p.target_type=#{targetTypeId}
		</if>
		<if test="effecDateStart!=null and  effecDateStart!=''">
			<![CDATA[and p.estart_date>=#{effecDateStart}]]>
		</if>
		<if test="effecDateEnd!=null and  effecDateEnd!=''">
			<![CDATA[and p.eend_date <= #{effecDateEnd}]]>
		</if>
		order by p.edit_date desc
		<if test="start !=null">
			LIMIT ${start} ,${length} 
		</if>
	</select>
	<select id="getQualityTargetCount" parameterType="Map" resultType="int">
		select count(p.id)
		from BMS_QM_QUALITY_TARGET_PARAMETER p left join
		BMS_BASE_USER u on p.editor_id=u.id
		left join BMS_BASE_FACTORY f on p.factory_id=f.id
		left join BMS_BASE_WORKSHOP w on p.workshop_id=w.id
		left join BMS_BASE_KEY k on p.target_type=k.id
		where p.status='0'
		<if test="factoryId!=null and factoryId!=0">
			and p.factory_id=#{factoryId}
		</if>
		<if test="workshopId!=null and  workshopId!=0">
			and p.workshop_id=#{workshopId}
		</if>
		<if test="targetTypeId!=null and  targetTypeId!=0">
			and p.target_type=#{targetTypeId}
		</if>
		<if test="effecDateStart!=null and  effecDateStart!=''">
			<![CDATA[and p.estart_date>=#{effecDateStart}]]>
		</if>
		<if test="effecDateEnd!=null and  effecDateEnd!=''">
			<![CDATA[and p.eend_date <= #{effecDateEnd}]]>
		</if>
	</select>
	<insert id="insertQualityTarget" parameterType="com.byd.bms.quality.model.QualityTargetBean" useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_QUALITY_TARGET_PARAMETER
		(factory_id,workshop_id,target_type,target_value,estart_date,eend_date,status,editor_id,edit_date)
		values(#{factoryId},#{workshopId},#{targetTypeId},#{targetVal},#{effecDateStart},#{effecDateEnd},'0',#{editorId},#{editDate})
	</insert>
	<update id="updateQualityTarget" parameterType="com.byd.bms.quality.model.QualityTargetBean">
		update BMS_QM_QUALITY_TARGET_PARAMETER
		<set>
			factory_id=#{factoryId},workshop_id=#{workshopId},target_type=#{targetTypeId},target_value=#{targetVal},estart_date=#{effecDateStart},
			eend_date=#{effecDateEnd},status=#{status},editor_id=#{editorId},edit_date=#{editDate}
		</set>
		where id=#{id}
	</update>
	
	<select id="getProcessFaultList" parameterType="Map" resultType="Map">
	SELECT p.*,order_no,order_describe,WEEKOFYEAR(fault_date) AS week,
	f.factory_name,p.processFaultArea AS area,u.display_name AS editor_name,b.bus_type_code FROM BMS_QM_PROCESS_PROBLEM p
	LEFT JOIN BMS_BASE_FACTORY f ON p.factory_id = f.id
	LEFT JOIN BMS_BASE_BUS_TYPE b ON p.bus_type = b.id
	LEFT JOIN BMS_BASE_USER u on p.editor_id=u.id
  	LEFT JOIN BMS_PLAN_BUS s on p.vin = s.vin
	WHERE 1=1 
	<if test="vin != null and vin != ''">
	AND p.vin LIKE CONCAT('%',#{vin},'%')
	</if>
	<if test="date_start != null and date_start != ''">
	AND p.fault_date >= #{date_start}
	</if>
	<if test="date_end != null and date_end != ''">
	<![CDATA[ AND p.fault_date <= #{date_end} ]]>
	</if>
	<if test="order_no != null and order_no != ''">
	AND p.order_no = #{order_no}
	</if>
	
		<if test="bus_type != null and bus_type != ''">
		AND b.bus_type_code = #{bus_type}
		</if>
		<if test="area != null and area != '全部'">
		AND p.processFaultArea = #{area}
		</if>
		<if test="week != null and week != ''">
		AND WEEKOFYEAR(p.fault_date) = #{week}
		</if>
		<if test="level != null and level != ''">
		AND p.fault_level_id = #{level}
		</if>
		<if test="fault_mils == 1">
		AND fault_mils >= 15000
		</if>
		<if test="fault_mils == 2">
		<![CDATA[ AND fault_mils < 15000 ]]>
		</if>
		<if test="is_batch != null and is_batch != ''">
		AND p.is_batch = #{is_batch}
		</if>
		<if test="factory_id != null and factory_id != 0">
			AND p.factory_id = #{factory_id}
		</if>
		<if test="fault_phenomenon != null and fault_phenomenon != ''">
			AND p.fault_phenomenon LIKE CONCAT('%',#{fault_phenomenon},'%')
		</if>
		ORDER BY edit_date DESC
		<if test="start !=null">
			LIMIT ${start} ,${length} 
		</if>
	</select>
	<select id="getProcessFaultCount" parameterType="Map" resultType="int">
	SELECT COUNT(p.id) FROM BMS_QM_PROCESS_PROBLEM p
	LEFT JOIN BMS_BASE_FACTORY f ON p.factory_id = f.id
	LEFT JOIN BMS_BASE_BUS_TYPE b ON p.bus_type = b.id
	WHERE 1=1 
	<if test="vin != null and vin != ''">
	AND p.vin LIKE CONCAT('%',#{vin},'%')
	</if>
	<if test="date_start != null and date_start != ''">
	AND p.fault_date >= #{date_start}
	</if>
	<if test="date_end != null and date_end != ''">
	<![CDATA[ AND p.fault_date <= #{date_end} ]]>
	</if>
	<if test="order_no != null and order_no != ''">
	AND p.order_no = #{order_no}
	</if>
		<if test="bus_type != null and bus_type != ''">
		AND b.bus_type_code = #{bus_type}
		</if>
		<if test="area != null and area != '全部'">
		AND p.processFaultArea = #{area}
		</if>
		<if test="week != null and week != ''">
		AND WEEKOFYEAR(p.fault_date) = #{week}
		</if>
		<if test="level != null and level != ''">
		AND p.fault_level_id = #{level}
		</if>
		<if test="fault_mils == 1">
		AND fault_mils >= 15000
		</if>
		<if test="fault_mils == 2">
		<![CDATA[ AND fault_mils < 15000 ]]>
		</if>
		<if test="is_batch != null and is_batch != ''">
		AND p.is_batch = #{is_batch}
		</if>
		<if test="factory_id != null and factory_id != 0">
			AND p.factory_id = #{factory_id}
		</if>
		<if test="fault_phenomenon != null and fault_phenomenon != ''">
			AND p.fault_phenomenon LIKE CONCAT('%',#{fault_phenomenon},'%')
		</if>
	</select>
	
	<insert id="addProcessFaultMobile" parameterType="Map" useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
			INSERT INTO BMS_QM_PROCESS_PROBLEM 
			(factory_id, customer_name, vin,area, order_no,processFaultArea, order_describe, customer_bus_number, license_number, 
			fault_phenomenon, fault_components, fault_date, bus_type, fault_mils, fault_level_id, response_factory,
			response_workshop,resolve_user, is_batch, fault_reason, resolve_method, resolve_date, resolve_result, 
			memo, report_file_path, punish, compensation, status,create_user, edit_date)	
			VALUES(#{factory_id},#{customer_name},#{vin},#{area},
			#{order_no},#{processFaultArea},
			<if test="order_describe != ''">
			#{order_describe},
			</if>
			<if test="order_describe == ''">
			(SELECT order_desc FROM BMS_OR_HISTORY_ORDER WHERE order_no = #{order_no}),
			</if>
			#{customer_bus_number},#{license_number},
			#{fault_phenomenon},#{fault_components},#{fault_date},#{bus_type},#{fault_mils},#{fault_level_id},#{response_factory},
			#{workshop},#{resolve_user},#{is_batch},#{fault_reason},#{resolve_method},#{resolve_date},#{resolve_result},
			#{memo},#{report_file_path},#{punish},#{compensation},#{status},#{create_user},#{edit_date})
	</insert>
	
	<insert id="addProcessFault" parameterType="com.byd.bms.quality.model.ProcessFaultBean" useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO BMS_QM_PROCESS_PROBLEM 
		(factory_id, customer_name, vin, order_no,processFaultArea, order_describe, customer_bus_number, license_number, 
		fault_phenomenon, fault_components, fault_date, bus_type, fault_mils, fault_level_id, response_factory,
		response_workshop, is_batch, fault_reason, resolve_method, resolve_date, resolve_result, 
		memo, report_file_path, punish, compensation, status,create_user, editor_id, edit_date)	
		VALUES(#{factory_id},#{customer_name},#{vin},
		#{order_no},#{processFaultArea},
		<if test="order_describe != ''">
		#{order_describe},
		</if>
		<if test="order_describe == ''">
		(SELECT order_desc FROM BMS_OR_HISTORY_ORDER WHERE order_no = #{order_no}),
		</if>
		#{customer_bus_number},#{license_number},
		#{fault_phenomenon},#{fault_components},#{fault_date},#{bus_type},#{fault_mils},#{fault_level_id},#{response_factory},
		#{response_workshop},#{is_batch},#{fault_reason},#{resolve_method},#{resolve_date},#{resolve_result},
		#{memo},#{report_file_path},#{punish},#{compensation},#{status},#{create_user},#{editor_id},#{edit_date})
	</insert>
	<insert id="addProcessFault2" parameterType="com.byd.bms.quality.model.ProcessFaultBean" useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO BMS_QM_PROCESS_PROBLEM 
		(factory_id, customer_name, vin, order_no,processFaultArea, order_describe, customer_bus_number, license_number, 
		fault_phenomenon, fault_components, fault_date, bus_type, fault_mils, fault_level_id, response_factory,
		response_workshop, is_batch, fault_reason, resolve_method, resolve_date, resolve_result, 
		memo, report_file_path, punish, compensation, status,create_user, editor_id, edit_date)	
		VALUES((SELECT factory_id FROM BMS_PD_VIN WHERE vin = #{vin}),#{customer_name},#{vin},
		(SELECT order_no FROM BMS_OR_ORDER WHERE id = 
		(SELECT order_id FROM BMS_PD_VIN WHERE vin = #{vin})),#{processFaultArea},
		(
		SELECT CONCAT(o.order_name,t.bus_type_code,' ',o.order_qty,'台') AS order_describe FROM BMS_OR_ORDER o
		LEFT JOIN BMS_BASE_BUS_TYPE t ON o.bus_type_id=t.id
		WHERE o.id = 
		(SELECT order_id FROM BMS_PD_VIN WHERE vin = #{vin})
		)
		,#{customer_bus_number},#{license_number},
		#{fault_phenomenon},#{fault_components},#{fault_date},
		(SELECT bus_type_id FROM BMS_OR_ORDER WHERE id = (SELECT order_id FROM BMS_PD_VIN WHERE vin = #{vin})),
		#{fault_mils},#{fault_level_id},#{response_factory},
		#{response_workshop},#{is_batch},#{fault_reason},#{resolve_method},#{resolve_date},#{resolve_result},
		#{memo},#{report_file_path},#{punish},#{compensation},#{status},#{create_user},#{editor_id},#{edit_date})
	</insert>
	<update id= "updateProcessFaultPics" parameterType="Map">
	UPDATE BMS_QM_PROCESS_PROBLEM SET fault_pre_pics = #{picAstr} , falut_pics = #{picBstr} WHERE id = #{id}
	</update>
	
	<update id="editProcessFault" parameterType="com.byd.bms.quality.model.ProcessFaultBean">
		UPDATE BMS_QM_PROCESS_PROBLEM
		SET customer_name=#{customer_name}, vin=#{vin}, license_number=#{license_number},
		fault_date=#{fault_date}, bus_type=#{bus_type}, fault_mils=#{fault_mils},
		order_describe = #{order_describe},processFaultArea=#{processFaultArea},
		<if test="factory_id != null and factory_id != ''">
		factory_id = #{factory_id},
		</if>
		<if test="order_no != null and order_no != ''">
		order_no =  #{order_no},
		</if>
		<if test="customer_bus_number != null and customer_bus_number != ''">
		customer_bus_number = #{customer_bus_number},  
		</if>
		<if test="fault_phenomenon != null and fault_phenomenon != ''">
		fault_phenomenon = #{fault_phenomenon},  
		</if>
		<if test="fault_components != null and fault_components != ''">
		fault_components = #{fault_components},  
		</if>
		<if test="fault_level_id != null and fault_level_id != ''">
		fault_level_id = #{fault_level_id},  
		</if>
		<if test="response_workshop != null and response_workshop != ''">
		response_factory = #{response_factory},  response_workshop = #{response_workshop},  
		</if>
		<if test="is_batch != null and is_batch != ''">
		is_batch = #{is_batch},  
		</if>
		<if test="fault_reason != null and fault_reason != ''">
		fault_reason = #{fault_reason},  
		</if>
		<if test="resolve_method != null and resolve_method != ''">
		resolve_method = #{resolve_method},  
		</if>
		<if test="resolve_date != null and resolve_date != ''">
		resolve_date = #{resolve_date},  
		</if>
		<if test="resolve_result != null and resolve_result != ''">
		resolve_result = #{resolve_result},  
		</if>
		<if test="memo != null and memo != ''">
		memo = #{memo},  
		</if>
		<if test="report_file_path != null and report_file_path != ''">
		report_file_path = #{report_file_path},  
		</if>
		<if test="punish != null and punish != ''">
		punish = #{punish},  
		</if>
		<if test="create_user != null and create_user != ''">
		create_user = #{create_user},  
		</if>
		<if test="compensation != null and compensation != ''">
		compensation = #{compensation},  
		</if>
		<if test="status != null and status != ''">
		status = #{status},  
		</if>
		editor_id=#{editor_id}, 
		edit_date=#{edit_date}
		WHERE id = #{id};
	</update>
	<select id="showProcessFaultInfo" parameterType="int" resultType="com.byd.bms.quality.model.ProcessFaultBean">
		SELECT p.*,b.id AS bus_id FROM BMS_QM_PROCESS_PROBLEM p
		LEFT JOIN BMS_PLAN_BUS b ON p.vin = b.vin
		WHERE p.id = #{id}
	</select>
	<select id="showProblemImproveInfo" parameterType="int" resultType="com.byd.bms.quality.model.ProblemImproveBean">
		SELECT id,fault_description,factory_id,customer_name,report_status,vin,order_id,order_describe,license_number,fault_phenomenon,
		fault_components,fault_date,bus_type,fault_mils,fault_level_id,response_workshop,fault_reason,resolve_method,resolve_date,
		risk_evaluate,keystone_attention,fault_pic_path,8D_REPORT_PATH AS eightD_report_path,close_evidenc_path,is_closed,
		memo,editor_id,edit_date FROM BMS_QM_IMPROVE_PROBLEM WHERE id = #{id}
	</select>
	
	
<!-- ======================== yk end=================================-->

<!-- ======================== tj start=================================-->
    <select id="getKeyPartsTraceList" parameterType="Map" resultType="Map">
	select f.id factory_id,f.factory_name,t.workshop,t.bus_number,o.order_no,
		o.order_name,c.order_config_name,u.username,t.edit_date,td.key_components_template_id 
		    from BMS_QM_KEY_PARTS t
				RIGHT JOIN BMS_QM_KEY_PARTS_TEMPLATE_DETAILS td on td.id = t.key_parts_template_details_id
				LEFT JOIN BMS_QM_KEY_PARTS_TEMPLATE_HEADER th on th.id = td.key_components_template_id 
				LEFT JOIN BMS_OR_ORDER_CONFIG c on c.id=th.order_config_id and c.order_id = th.order_id
				LEFT JOIN BMS_OR_ORDER o ON o.id = c.order_id
		    LEFT JOIN BMS_BASE_FACTORY f on f.id=t.factory_id
		    LEFT JOIN BMS_BASE_USER u on u.id=t.editor_id 
        	where t.key_parts_template_details_id>0 AND 1=1 
		<if test="busNumber!=null and busNumber!=''">
			and t.bus_number=#{busNumber}
		</if>
		<if test="factoryId!=null and factoryId!=''">
			and t.factory_id=#{factoryId}
		</if>
		<if test="workshop!=null and workshop!='' and workshop!='全部'">
			and t.workshop=#{workshop}
		</if>
		<if test="orderNo!=null and orderNo!=''">
			and o.order_no=#{orderNo}
		</if>
		<if test="bustypeId!=null and bustypeId!=''">
			and o.bus_type_id=#{bustypeId}
		</if>
		<if test="orderconfigId!=null and orderconfigId!=''">
			and c.id=#{orderconfigId}
		</if>
			group by t.bus_number,t.factory_id,t.workshop order by edit_date desc
		<if test="start!=null">
			limit #{start},#{length}
		</if>
	</select>
	<select id="getKeyPartsTraceCount" parameterType="Map" resultType="int">
	  select count(1) from (
		select f.id factory_id,f.factory_name,t.workshop,t.bus_number,o.order_no,
		o.order_name,c.order_config_name,u.username,t.edit_date,td.key_components_template_id  from BMS_QM_KEY_PARTS t
				RIGHT JOIN BMS_QM_KEY_PARTS_TEMPLATE_DETAILS td on td.id = t.key_parts_template_details_id
				LEFT JOIN BMS_QM_KEY_PARTS_TEMPLATE_HEADER th on th.id = td.key_components_template_id 
				LEFT JOIN BMS_OR_ORDER_CONFIG c on c.id=th.order_config_id and c.order_id = th.order_id
				LEFT JOIN BMS_OR_ORDER o ON o.id = c.order_id
		    LEFT JOIN BMS_BASE_FACTORY f on f.id=t.factory_id
		    LEFT JOIN BMS_BASE_USER u on u.id=t.editor_id 
        	where t.key_parts_template_details_id>0 AND 1=1 
		<if test="busNumber!=null and busNumber!=''">
			and t.bus_number=#{busNumber}
		</if>
		<if test="factoryId!=null and factoryId!=''">
			and t.factory_id=#{factoryId}
		</if>
		<if test="workshop!=null and workshop!='' and workshop!='全部'">
			and t.workshop=#{workshop}
		</if>
		<if test="orderNo!=null and orderNo!=''">
			and o.order_no=#{orderNo}
		</if>
		<if test="bustypeId!=null and bustypeId!=''">
			and o.bus_type_id=#{bustypeId}
		</if>
		<if test="orderconfigId!=null and orderconfigId!=''">
			and c.id=#{orderconfigId}
		</if>
		group by t.bus_number,t.factory_id,t.workshop) t1
     </select>
     <update id="updateKeyParts" parameterType="Map">
		UPDATE BMS_QM_KEY_PARTS SET 
		<if test="batch != null and batch != ''">
		   batch = #{batch},  
		</if>
		editor_id=#{editor_id}, 
		edit_date=#{edit_date}
		WHERE id = #{keypartsId}
	</update>
     <select id="getBusNumberDetailList" parameterType="Map" resultType="Map">
		<!-- select t.*,t.3C_components as CCC_components,b.id as keypartsId,
		   case 3C_components WHEN '是' THEN t.3C_no WHEN '否' THEN b.batch end  as batch
		    from BMS_QM_KEY_PARTS b
		    LEFT JOIN  BMS_QM_KEY_PARTS_TEMPLATE_DETAILS  t on b.key_parts_template_details_id=t.id 
		    LEFT JOIN BMS_QM_KEY_PARTS_TEMPLATE_HEADER h on h.id=t.key_components_template_id 
			 where 1=1 and t.key_components_template_id=#{key_components_template_id} 
			 AND b.bus_number = #{bus_number}
			and t.workshop=#{workshop}
			order by b.id -->
			select t.*,t.3C_components as CCC_components,b.id as keypartsId,
		  	case 3C_components WHEN '是' THEN t.3C_no WHEN '否' THEN b.batch end  as batch,
			(select count(s.id) from BMS_PD_SCAN s left join BMS_BASE_PROCESS p on s.process_id=p.id
			left join BMS_BASE_KEY k on k.value=p.plan_node_id and k.key_code='PLAN_CODE'
			where p.plan_node_id is not null and s.bus_number=#{bus_number} and s.workshop_name=#{workshop}
			and k.key_name=concat(#{workshop},'下线')
			) offline_flag,case when b.process_number is not null then 1 else  0 end as scan_flag
		    from BMS_QM_KEY_PARTS_TEMPLATE_DETAILS  t 
		    LEFT JOIN BMS_QM_KEY_PARTS_TEMPLATE_HEADER h on h.id=t.key_components_template_id
		    LEFT JOIN BMS_QM_KEY_PARTS b on b.key_parts_template_details_id=t.id AND b.bus_number =#{bus_number}
			 where 1=1 and t.key_components_template_id=#{key_components_template_id} 
			and t.workshop=#{workshop}
			order by t.id
	</select>
	
	<select id="getMaterialExceptionLogsList" parameterType="Map" resultType="Map">
		select t.*,CONCAT(o.order_no,' ',o.order_name,ty.bus_type_code,'  ',o.order_qty,' ','台') as order_name,
		o.order_no,ty.bus_type_code,u.username from BMS_QM_MATERIAL_EXCEPTION_LOGS t
<!-- 		LEFT JOIN BMS_BASE_FACTORY f on f.id=t.factory_id -->
	    LEFT JOIN BMS_BASE_BUS_TYPE ty on ty.id=t.bus_type_id
        LEFT JOIN BMS_BASE_USER u on u.id=t.creater_id    <!-- 	    LEFT JOIN BMS_BASE_WORKSHOP s on s.id=t.workshop_id -->
	    LEFT JOIN BMS_OR_ORDER o on o.id=t.order_id where 1=1 
		<if test="factory!=null and factory!='全部'">
			and t.factory=#{factory}
		</if>
		<if test="workshop!=null and workshop!='全部' and workshop!=''">
			and t.workshop=#{workshop}
		</if>
		<if test="bustypeId!=null and bustypeId!=''">
			and t.bus_type_id=#{bustypeId}
		</if> 
		<if test="material!=null and material!=''">
			and t.material=#{material}
		</if>
		<if test="orderNo!=null and  orderNo!=''">
			and o.order_no=#{orderNo}
		</if>
		<if test="bugLevel!=null and bugLevel!=''">
			and FIND_IN_SET(t.bug_level,#{bugLevel}) 
		</if>
		<if test="occurDateStart!=null and  occurDateStart!=''">
			<![CDATA[and t.occur_date>=#{occurDateStart}]]>
		</if>
		<if test="occurDateEnd!=null and  occurDateEnd!=''">
			<![CDATA[and t.occur_date < #{occurDateEnd}]]>
		</if>
		order by creat_date desc
		<if test="start!=null and length!=-1">
			limit #{start},#{length}
		</if>
	</select>
	<select id="getMaterialExceptionLogsCount" parameterType="Map" resultType="int">
		select COUNT(1) from BMS_QM_MATERIAL_EXCEPTION_LOGS t 
           LEFT JOIN BMS_OR_ORDER o on o.id=t.order_id where 1=1 
		<if test="factory!=null and factory!='全部'">
			and t.factory=#{factory}
		</if>
		<if test="workshop!=null and  workshop!='全部' and workshop!=''">
			and t.workshop=#{workshop}
		</if>
		<if test="bustypeId!=null and bustypeId!=''">
			and t.bus_type_id=#{bustypeId}
		</if> 
		<if test="material!=null and material!=''">
			and t.material=#{material}
		</if>
		<if test="orderNo!=null and  orderNo!=''">
			and o.order_no=#{orderNo} 
		</if>
		<if test="bugLevel!=null and bugLevel!=''">
			and FIND_IN_SET(t.bug_level,#{bugLevel}) 
		</if>
		<if test="occurDateStart!=null and  occurDateStart!=''">
			<![CDATA[and t.occur_date>=#{occurDateStart}]]>
		</if>
		<if test="occurDateEnd!=null and  occurDateEnd!=''">
			<![CDATA[and t.occur_date < #{occurDateEnd}]]>
		</if>
     </select>
     <insert id="saveMaterialExceptionLogs" parameterType="com.byd.bms.quality.model.MaterialExceptionLogs"
		useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_MATERIAL_EXCEPTION_LOGS 
		(occur_date,factory_id,factory,workshop_id,workshop,bus_type_id,order_id,material,bug_level,
		description,bphoto,tmp_measures,fault_reason,imp_measure,resp_unit,resp_person,
		expc_finish_date,verifier,verify_result,fphoto,memo,creater_id,creat_date)
		values(
		#{occur_date},#{factory_id},#{factory},#{workshop_id},#{workshop},#{bus_type_id},#{order_id},#{material},
		#{bug_level},#{description},#{bphoto},#{tmp_measures},#{fault_reason},#{imp_measure},
		#{resp_unit},#{resp_person},#{expc_finish_date},#{verifier},#{verify_result},#{fphoto},
		#{memo},#{creator_id},#{creat_date}
		)
	</insert>
	<update id="updateMaterialExceptionLogs" parameterType="com.byd.bms.quality.model.MaterialExceptionLogs">
		update BMS_QM_MATERIAL_EXCEPTION_LOGS set occur_date=#{occur_date},
		factory_id=#{factory_id},factory=#{factory},workshop_id=#{workshop_id},workshop=#{workshop},
		bus_type_id=#{bus_type_id},order_id=#{order_id},material=#{material},bug_level=#{bug_level},
		
		<if test="description!=null and description!=''">
			description=#{description},
		</if>
		<if test="bphoto!=null and bphoto!=''">
			bphoto=#{bphoto},
		</if>
		<if test="tmp_measures!=null and tmp_measures!=''">
			tmp_measures=#{tmp_measures},
		</if>
		<if test="fault_reason!=null and fault_reason!=''">
			fault_reason=#{fault_reason},
		</if>
		<if test="fphoto!=null and fphoto!=''">
			fphoto=#{fphoto},
		</if>
		fault_reason=#{fault_reason},imp_measure=#{imp_measure},resp_unit=#{resp_unit},
		resp_person=#{resp_person},expc_finish_date=#{expc_finish_date},verifier=#{verifier},
		verify_result=#{verify_result},
		memo=#{memo},creater_id=#{creator_id},creat_date=#{creat_date}
		where id=#{id}
	</update>
	<select id="selectLogsById" parameterType="String" resultType="com.byd.bms.quality.model.MaterialExceptionLogs">
		select * from BMS_QM_MATERIAL_EXCEPTION_LOGS t where 1=1 
		<if test="id!=null and id!=0">
			and t.id=#{id}
		</if>
	</select>
	<insert id="saveParts" parameterType="Map"  useGeneratedKeys="true" keyProperty="id">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_KEY_PARTS
		(bus_number,factory_id,key_parts_template_details_id,workshop,process_number,process_name,parts_no,parts_name,vendor,batch,editor_id,edit_date)
		values
		(#{bus_number},#{factory_id},#{key_parts_template_detail_id},#{workshop},#{process_number},#{process_name},
		#{parts_no} ,#{parts_name},#{vendor},#{batch},#{editor_id},#{edit_date}
		)

	</insert>
	
<!-- ======================== tj end=================================-->

	
	
	<!-- 品质标准更新记录 start add by tangjin -->
	
	<resultMap type="com.byd.bms.quality.model.BmsBaseQCStdRecord" id="stdRecordMap">
		<id property="id" column="id" />
		<result property="recordNo" column="record_num" />
		<result property="usynopsis" column="usynopsis" />
		<result property="standardfile" column="standardfile" />
		<result property="bfilePath" column="bfile_path" />
		<result property="afilePath" column="afile_path" />
		<result property="memo" column="memo" />
		<result property="mailAddrs" column="email_addrs" />
		<result property="editorId" column="creator_id" />
		<result property="editDate" column="creat_date" />
		<result property="editor" column="editor" />
	</resultMap>
	<insert id="insertStdRecord" parameterType="com.byd.bms.quality.model.BmsBaseQCStdRecord"
		useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_QUALITY_STANDARDS_CHANGE_LOGS 
		(record_num,bus_type,order_id,workshop,scope,implement_factory,implement_bus_number,confirmor,
		confirm_date,usynopsis,standardfile,bfile_path,afile_path,memo,
		before_desc,after_desc,email_addrs,creator_id,creat_date)
		values(
		#{recordNo},#{busType},#{orderId},#{workshop},#{scope},#{implementFactory},#{implementBusNumber},
		#{confirmor},#{confirm_date},#{usynopsis},#{standardfile},#{bfilePath},#{afilePath},#{memo},
		#{beforeDesc},#{afterDesc},#{mailAddrs},#{editorId},#{editDate}
		)
	</insert>
	<select id="selectStdRecord" parameterType="Map" resultType="Map">
		select i.id implement_info_id,t.id quality_standard_id,record_num,bus_type,order_id,workshop,scope,i.implement_factory,i.implement_bus_number,i.confirmor,
		i.confirm_date,usynopsis,standardfile,bfile_path,afile_path,memo,
		before_desc,after_desc,i.editor implement_editor,i.edit_date implement_edit_date from BMS_QM_QUALITY_STANDARDS_CHANGE_LOGS t
		left join BMS_QM_QUALITY_STANDARD_IMPLEMENT_INFO i on t.id=i.quality_standard_id
		 where quality_standard_id=#{id} and i.implement_factory=#{implement_factory}  and i.deleted='0'
	</select>
	<select id="selectStdRecordById" parameterType="int" resultType="Map">
		select id,id quality_standard_id,record_num,bus_type,order_id,workshop,scope,
		usynopsis,standardfile,bfile_path,afile_path,memo,
		before_desc,after_desc from BMS_QM_QUALITY_STANDARDS_CHANGE_LOGS t where id=#{id} 
	</select>
	<select id="getStdRecordList" parameterType="Map" resultType="Map">
		select t.id,t.record_num,t.bus_type,t.order_id,t.workshop,t.scope,t.usynopsis,t.afile_path,t.bfile_path,
         t.after_desc,t.before_desc,t.memo,t.creat_date,GROUP_CONCAT(i.implement_factory) implement_factory,
         u.username editor,i.editor implement_editor,i.edit_date implement_edit_date from BMS_QM_QUALITY_STANDARDS_CHANGE_LOGS t
         left join BMS_QM_QUALITY_STANDARD_IMPLEMENT_INFO i on i.quality_standard_id=t.id and i.deleted='0'
		 left join BMS_BASE_USER u on t.creator_id=u.id where 1=1 GROUP BY t.id
		<if test="recordno!=null and recordno!=''">
			and t.record_num=#{recordno}
		</if>
		<if test="bustype!=null and bustype!=''">
			and t.bus_type=#{bustype}
		</if>
		<if test="workshop!=null and workshop!=''">
            and t.workshop=#{workshop}
		</if>
		<if test="orderno!=null and orderno!=''">
			and t.order_id=#{orderno}
		</if>
		<if test="usynopsis!=null and usynopsis!=''">
			and t.usynopsis like concat('%',#{usynopsis},'%')
		</if>
		order by t.id desc
		<if test="start!=null and length!=-1">
			LIMIT #{start} ,#{length}
		</if>
	</select>
	<select id="getStdRecordCount" parameterType="Map" resultType="int">
		select count(t.id) from BMS_QM_QUALITY_STANDARDS_CHANGE_LOGS t where 1=1
		<if test="recordno!=null and recordno!=''">
			and t.record_num=#{recordno}
		</if>
		<if test="bustype!=null and bustype!=''">
			and t.bus_type=#{bustype}
		</if>
		<if test="workshop!=null and workshop!=''">
            and t.workshop=#{workshop}
		</if>
		<if test="orderno!=null and orderno!=''">
			and t.order_id=#{orderno}
		</if>
		<if test="usynopsis!=null and usynopsis!=''">
			and t.usynopsis like concat('%',#{usynopsis},'%')
		</if>
     </select>
     
     <select id="getFaultLibList" parameterType="Map" resultType="Map">
     	select f.id,f.parts_id,f.bug_type,f.bug,f.serious_level,f.fault_type,
		f.workshop_name,f.workgroup_name,f.editor_id,u.display_name,f.edit_date
		from BMS_QM_STANDARD_FAULT_LIBRARY f 
		left join BMS_BASE_USER u on f.editor_id=u.id
		where 1=1
		<if test="bugType !=null and  bugType !=''">
			and f.bug_type like CONCAT('%',#{bugType},'%')
		</if>
		<if test="bug!=null and  bug!=''">
			and f.bug like CONCAT('%',#{bug},'%')
		</if>
		<if test="workshop!=null and  workshop!=''">
			and f.workshop_name=#{workshop}
		</if>
		<if test="workgroup!=null and  workgroup!=''">
			and f.workgroup_name=#{workgroup}
		</if>
		<if test="faultType!=null and faultType.length!=0">
			and f.fault_type in
			<foreach collection="faultType" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="faultLevel!=null  and faultLevel.length!=0">
			and f.serious_level in
			<foreach collection="faultLevel" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		order by f.edit_date desc
		<if test="start !=null">
			LIMIT ${start} ,${length} 
		</if>
     </select>
     <select id="getFaultLibCount" parameterType="Map" resultType="int">
		select count(f.id)
		from BMS_QM_STANDARD_FAULT_LIBRARY f left join
		BMS_BASE_USER u on f.editor_id=u.id
		where 1=1
		<if test="bugType !=null and  bugType !=''">
			and f.bug_type like CONCAT('%',#{bugType},'%')
		</if>
		<if test="bug!=null and  bug!=''">
			and f.bug like CONCAT('%',#{bug},'%')
		</if>
		<if test="workshop!=null and  workshop!=''">
			and f.workshop_name=#{workshop}
		</if>
		<if test="workgroup!=null and  workgroup!=''">
			and f.workgroup_name=#{workgroup}
		</if>
		<if test="faultType!=null and faultType.length!=0">
			and f.fault_type in
			<foreach collection="faultType" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="faultLevel!=null and faultLevel.length!=0">
			and f.serious_level in
			<foreach collection="faultLevel" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
	</select>
     
     <insert id="insertProblemImprove" parameterType="com.byd.bms.quality.model.ProblemImproveBean" useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		INSERT INTO BMS_QM_IMPROVE_PROBLEM
		(fault_description, factory_id, customer_name, report_status, vin, order_id, 
		order_describe, license_number, fault_phenomenon, fault_components, fault_date, 
		bus_type, fault_mils, fault_level_id, response_workshop, fault_reason, 
		resolve_method, resolve_date, risk_evaluate, keystone_attention,fault_pic_path, 8D_REPORT_PATH, 
		close_evidenc_path, is_closed, memo, editor_id, edit_date)
		VALUES(#{fault_description}, #{factory_id}, #{customer_name}, #{report_status}, #{vin}, #{order_id}, 
		#{order_describe}, #{license_number}, #{fault_phenomenon}, #{fault_components}, #{fault_date}, 
		#{bus_type}, #{fault_mils}, #{fault_level}, #{response_workshop}, #{fault_reason}, 
		#{resolve_method}, #{resolve_date}, #{risk_evaluate}, #{keystone_attention}, #{fault_pic_path},  #{eightD_report_path}, 
		#{close_evidenc_path}, #{is_closed}, #{memo}, #{editor_id}, #{edit_date});
	</insert>
	<select id="getProblemImproveList" parameterType="Map" resultType="Map">
		SELECT p.*,u.display_name,f.factory_name,w.workshop_name FROM BMS_QM_IMPROVE_PROBLEM p
		LEFT JOIN BMS_BASE_USER u on p.editor_id=u.id
		LEFT JOIN BMS_BASE_FACTORY f ON p.factory_id = f.id
		LEFT JOIN BMS_BASE_WORKSHOP w on p.response_workshop=w.id
		WHERE 1=1 
		<if test="factory_id!=null and factory_id!=''">
			and p.factory_id = #{factory_id}
		</if>
		<if test="bus_type!=null and bus_type!=''">
			and p.bus_type = #{bus_type}
		</if>
		<if test="vin!=null and vin!=''">
			and p.vin = #{vin}
		</if>
		<if test="fault_description!=null and fault_description!=''">
			and p.fault_description like CONCAT('%',#{fault_description},'%')
		</if>
		<if test="is_closed!=null and is_closed!=''">
			and p.is_closed = #{is_closed}
		</if>
		order by f.edit_date desc
		<if test="start !=null">
			LIMIT ${start} ,${length} 
		</if>
	</select>
	<select id="getProblemImproveCount" parameterType="Map" resultType="int">
		SELECT COUNT(p.id) FROM BMS_QM_IMPROVE_PROBLEM p
		LEFT JOIN BMS_BASE_USER u on p.editor_id=u.id
		LEFT JOIN BMS_BASE_FACTORY f ON p.factory_id = f.id
		WHERE 1=1 
		<if test="factory_id!=null and factory_id!=''">
			and p.factory_id = #{factory_id}
		</if>
		<if test="bus_type!=null and bus_type!=''">
			and p.bus_type = #{bus_type}
		</if>
		<if test="vin!=null and vin!=''">
			and p.vin = #{vin}
		</if>
		<if test="fault_description!=null and fault_description!=''">
			and p.fault_description like CONCAT('%',#{fault_description},'%')
		</if>
		<if test="is_closed!=null and is_closed!=''">
			and p.is_closed = #{is_closed}
		</if>
	 </select>
     <select id="getQualityAbnormalRecordList" parameterType="Map" resultType="Map">
		SELECT p.*,o.order_no,t.bus_type_code FROM BMS_QM_QUALITY_ABNORMAL_RECORD p
		left join BMS_OR_ORDER o on o.id=p.order_id 
		left join BMS_BASE_BUS_TYPE t on t.id=p.bus_type
		WHERE deleted='0'
		<if test="factory!=null and factory!='全部'">
			and p.factory = #{factory}
		</if>
		<if test="test_node_id!=null and test_node_id!='' and test_node_id!='全部'">
			and p.test_node_id = #{test_node_id}
		</if>
		<if test="bus_type!=null and bus_type!=''">
			and p.bus_type = #{bus_type}
		</if>
		<if test="bus_number!=null and bus_number!=''">
			and p.bus_number = #{bus_number}
		</if>
		<if test="iqc!=null and iqc!=''">
			and p.iqc like CONCAT('%',#{iqc},'%')
		</if>
		<if test="order_no!=null and order_no!=''">
			and o.order_no = #{order_no}
		</if>
		order by p.id desc
		<if test="start !=null and length!=-1">
			LIMIT ${start} ,${length} 
		</if>
	</select>
	<select id="getQualityAbnormalRecordCount" parameterType="Map" resultType="int">
		SELECT count(1) FROM BMS_QM_QUALITY_ABNORMAL_RECORD p 
		left join BMS_OR_ORDER o on o.id=p.order_id WHERE deleted='0'
		<if test="factory!=null and factory!='全部'">
			and p.factory = #{factory}
		</if>
		<if test="test_node_id!=null and test_node_id!='' and test_node_id!='全部'">
			and p.test_node_id = #{test_node_id}
		</if>
		<if test="bus_type!=null and bus_type!=''">
			and p.bus_type = #{bus_type}
		</if>
		<if test="bus_number!=null and bus_number!=''">
			and p.bus_number = #{bus_number}
		</if>
		<if test="iqc!=null and iqc!=''">
			and p.iqc like CONCAT('%',#{iqc},'%')
		</if>
		<if test="order_no!=null and order_no!=''">
			and o.order_no = #{order_no}
		</if>
	</select>
	<insert id="insertQualityAbnormalRecord" parameterType="Map" useGeneratedKeys="true" keyProperty="id">
     	<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_QUALITY_ABNORMAL_RECORD (factory,test_node_id,test_node,bus_type,order_id,bus_number,bug_type,bug_desc,problem_desc,level,
		resp_unit,problem_photo_path,iqc,solution,remark,deleted,editor,edit_date) values
		(#{factory},#{test_node_id},#{test_node},#{bus_type},#{order_id},#{bus_number},#{bug_type},#{bug_desc},#{problem_desc},#{level},
		#{resp_unit},#{problem_photo_path},#{iqc},#{solution},#{remark},'0',#{editor},#{edit_date})
     </insert>
     <update id="deleteQualityAbnormalRecord" parameterType="java.util.List">
		update BMS_QM_QUALITY_ABNORMAL_RECORD set deleted='1' where id in
		<foreach collection="list" item="ids" index="index" open="("
			close=")" separator=",">
			#{ids}
		</foreach>
	</update>
	<select id="getBusNumber" parameterType="Map" resultType="Map">
		SELECT p.* FROM BMS_PLAN_BUS p
<!-- 		 left join BMS_OR_ORDER o on o.id=p.order_id -->
		 WHERE p.bus_number = #{bus_number} and p.order_id = #{order_id}
    </select>
    <update id="updateStdRecord" parameterType="com.byd.bms.quality.model.BmsBaseQCStdRecord">
		update BMS_QM_QUALITY_STANDARDS_CHANGE_LOGS set
		<if test="busType!=null and busType!=''">
			bus_type = #{busType},
		</if>
		<if test="orderId!=null and orderId!=''">
			order_id = #{orderId},
		</if>
		<if test="bfilePath!=null and bfilePath!=''">
			bfile_path = #{bfilePath},
		</if>
		<if test="bfilePath!=null and bfilePath!=''">
			bfile_path = #{bfilePath},
		</if>
		<if test="afilePath!=null and afilePath!=''">
			afile_path = #{afilePath},
		</if>
		<if test="scope!=null and scope!=''">
			scope = #{scope},
		</if>
		<if test="usynopsis!=null and usynopsis!=''">
			usynopsis = #{usynopsis},
		</if>
		<if test="beforeDesc!=null and beforeDesc!=''">
			before_desc = #{beforeDesc},
		</if>
		<if test="afterDesc!=null and afterDesc!=''">
			after_desc = #{afterDesc},
		</if>
		memo = #{memo}
		where id=#{id}
	</update>
	<update id="updateQualityStdImplementInfo" parameterType="Map">
		update BMS_QM_QUALITY_STANDARD_IMPLEMENT_INFO set
			
		<if test="implement_bus_number!=null and implement_bus_number!=''">
			implement_bus_number = #{implement_bus_number},
		</if>
		<if test="confirmor!=null and confirmor!=''">
			confirmor = #{confirmor},
		</if>
		<if test="confirm_date!=null and confirm_date!=''">
			confirm_date = #{confirm_date},
		</if>
		implement_factory = #{implement_factory}
		where id=#{id}
	</update>
	<insert id="insertQualityStdImplementInfo" parameterType="Map" useGeneratedKeys="true" keyProperty="id">
     	<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_QUALITY_STANDARD_IMPLEMENT_INFO (implement_factory,implement_bus_number,
		quality_standard_id,confirmor,confirm_date,deleted,editor,edit_date)
		values (#{implement_factory},#{implement_bus_number},#{quality_standard_id},#{confirmor},#{confirm_date},'0',#{editor},#{edit_date})
     </insert>
     
     <update id="deleteStandardImplementInfo" parameterType="Map">
		update BMS_QM_QUALITY_STANDARD_IMPLEMENT_INFO set deleted='1'
		where implement_factory not in 
		<foreach collection="list" index="index" item="item"
			open="(" separator="," close=")">
			#{item}
		</foreach>
		and quality_standard_id=#{quality_standard_id}
	</update>
	<insert id="saveMaterialExceptionLogsByBatch" parameterType="Map" useGeneratedKeys="true" keyProperty="id" >
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_MATERIAL_EXCEPTION_LOGS 
		(occur_date,factory_id,factory,workshop_id,workshop,bus_type_id,order_id,material,bug_level,description,tmp_measures,fault_reason,
		imp_measure,resp_unit,resp_person,expc_finish_date,verify_result,verifier,memo,creater_id,creat_date) 
		values
		<foreach collection="list" item="detail" index="index" separator=",">
			(#{detail.occur_date},#{detail.factory_id},#{detail.factory},#{detail.workshop_id},#{detail.workshop},#{detail.bus_type_id},
			#{detail.order_id},#{detail.material},#{detail.bug_level},#{detail.description},#{detail.tmp_measures},#{detail.fault_reason},
			#{detail.imp_measure},#{detail.resp_unit},#{detail.resp_person},#{detail.expc_finish_date},#{detail.verify_result},
			#{detail.verifer},#{detail.memo},#{creator_id},#{edit_date})
		</foreach>		
	</insert>
	<select id="getWorkshopByFactoryId" parameterType="String" resultType="Map">
	     select * from BMS_BASE_ORG where
		 parent_id in (select id from BMS_BASE_ORG o 
		where o.foreign_id=#{factory_id} and org_type='1' and deleted='0') and deleted='0'
    </select>
    <delete id="deleteProcessFault" parameterType="String" >
    DELETE FROM BMS_QM_PROCESS_PROBLEM WHERE id = #{processFaultId}
    </delete>
</mapper>
