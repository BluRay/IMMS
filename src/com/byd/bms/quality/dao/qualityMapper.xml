<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.byd.bms.quality.dao.IQualityDao">
<!-- ======================== xjw start=================================-->
	<select id="getOrderConfigList" parameterType="Map" resultType="Map">
		select o.id,c.id config_id,o.order_no,CONCAT(o.order_no,' ',o.order_name,t.bus_type_code,'  ',o.order_qty,'Âè∞') AS order_desc,
		o.memo,t.internal_name bus_type,c.order_config_name,u.username editor,c.edit_date,o.bus_type_id
		from BMS_OR_ORDER_CONFIG c 
		left join BMS_OR_ORDER o on o.id=c.order_id
		left join BMS_BASE_BUS_TYPE t on o.bus_type_id=t.id 
		left join BMS_BASE_USER u on u.id=c.editor_id
		where 1=1
		<if test="order_id !=null and order_id !=''">
			and o.id=#{order_id}
		</if>
		<if test="bus_type_id !=null and bus_type_id !=''">
			and o.bus_type_id=#{bus_type_id}
		</if>
		<if test="order_config_id !=null and order_config_id !='' ">
			and c.id=#{order_config_id}
		</if>
			order by o.order_no desc
		<if test="start !=null">
			limit #{start},#{length}
		</if>
		
	</select>
	
	<select id="getConfigTotalCount" parameterType="Map" resultType="int">
		select count(c.id)
		from BMS_OR_ORDER_CONFIG c 
		left join BMS_OR_ORDER o on o.id=c.order_id
		where 1=1
		<if test="order_id !=null and order_id !=''">
			and o.id=#{order_id}
		</if>
		<if test="bus_type_id !=null and bus_type_id !=''">
			and o.bus_type_id=#{bus_type_id}
		</if>
		<if test="order_config_id !=null and order_config_id !='' ">
			and c.id=#{order_config_id}
		</if>
	</select>
	
	<select id="queryKeyPartsHeader" parameterType="Map" resultType="Map">
		select id,bus_type_id,order_id,order_config_id from BMS_QM_KEY_PARTS_TEMPLATE_HEADER 
		where bus_type_id=#{bus_type_id} and order_id=#{order_id} and order_config_id=#{order_config_id}
	</select>
	
	<insert id="saveKeyPartsHeader" parameterType="Map" useGeneratedKeys="true" keyProperty="id" >
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_KEY_PARTS_TEMPLATE_HEADER (bus_type_id,order_id,order_config_id,editor_id,edit_date)
		values (#{bus_type_id},#{order_id},#{order_config_id},#{editor_id},#{edit_date})
	</insert>
	
	<update id='updateKeyPartsHeader' parameterType="Map">
		update BMS_QM_KEY_PARTS_TEMPLATE_HEADER set editor_id=#{editor_id} ,edit_date=#{edit_date}
		where bus_type_id=#{bus_type_id} and order_id=#{order_id} and order_config_id=#{order_config_id}
	</update>
	
	<insert id="saveKeyPartsDetails" parameterType="Map" useGeneratedKeys="true" keyProperty="id" >
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_KEY_PARTS_TEMPLATE_DETAILS 
		(key_components_template_id,sap_mat,parts_no,parts_name,size,vendor,workshop,process,3C_components,3C_no)
		values
		<foreach collection="detail_list" item="detail" index="index" separator=",">
			(#{header_id},#{detail.sap_mat},#{detail.parts_no},#{detail.parts_name},#{detail.size},#{detail.vendor},#{detail.workshop},#{detail.process},#{detail.ccc},#{detail.cccNo})
		</foreach>		
	</insert>
	
	<delete id="deleteKeyPartsByHeader" parameterType="int">
		delete from BMS_QM_KEY_PARTS_TEMPLATE_DETAILS where key_components_template_id=#{header_id}
	</delete>
	
	<select id="queryKeyPartsList" parameterType="Map" resultType="Map">
		select d.sap_mat,d.parts_no,d.parts_name,d.size,d.vendor,d.workshop,d.process,d.3C_components ccc
		from BMS_QM_KEY_PARTS_TEMPLATE_DETAILS d
		left join BMS_QM_KEY_PARTS_TEMPLATE_HEADER h on d.key_components_template_id=h.id
		where h.bus_type_id=#{bus_type_id} and h.order_id=#{order_id} and h.order_config_id=#{order_config_id}
	</select>
	
	<select id="queryWorkshopProcessList" resultType="Map">
     	select workshop,process_name process from BMS_BASE_PROCESS
     	where
     	<foreach collection='addList' item='detail' index="index" separator="or" >
     		(workshop=#{detail.workshop} and process_name=#{detail.process})
     	</foreach>
     </select>
     
     <select id="queryPrdRcdBusTypeTplList" parameterType="Map" resultType="Map">
     	select h.*,t.bus_type_code,u.username editor
     	from BMS_QM_TEST_CARD_TEMPLATE_HEADER h
     	left join BMS_BASE_BUS_TYPE t on t.id=h.bus_type_id
     	left join BMS_BASE_USER u on u.id=h.editor_id
     	where 1=1
     	<if test="bus_type_id !=null and bus_type_id !=0 ">
			and h.bus_type_id=#{bus_type_id}
		</if>
		<if test="test_node_id !=null and test_node_id !=0 ">
			and h.test_node_id=#{test_node_id}
		</if>
			order by h.bus_type_id,h.version desc
		<if test="start !=null">
			limit #{start},#{length}
		</if>
     </select>
     
     <select id="queryPrdRcdBusTypeTplCount" parameterType="Map" resultType="int">
     	select count(h.id) 
     	from BMS_QM_TEST_CARD_TEMPLATE_HEADER h
     	left join BMS_BASE_BUS_TYPE t on t.id=h.bus_type_id
     	where 1=1
     	<if test="bus_type_id !=null and bus_type_id !=0 ">
			and h.bus_type_id=#{bus_type_id}
		</if>
		<if test="test_node_id !=null and test_node_id !=0 ">
			and h.test_node_id=#{test_node_id}
		</if>
     </select>
     
     <insert id='insertPrdRcdBusTypeTplHeader' parameterType="Map" useGeneratedKeys="true" keyProperty="id" >
     	<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_TEST_CARD_TEMPLATE_HEADER (bus_type_id,test_node_id,test_node,tplType,version,memo,editor_id,edit_date)
		values (#{bus_type_id},#{test_node_id},#{test_node},'0',#{version},#{memo},#{editor_id},#{edit_date})
     </insert>
     
     <update id='updatePrdRcdBusTypeTplHeader' parameterType="Map">
     	update BMS_QM_TEST_CARD_TEMPLATE_HEADER set memo=#{memo},editor_id=#{editor_id},edit_date=#{edit_date}
     	where id=#{tpl_header_id}
     </update>
     
     <insert id="insertPrdRcdBusTypeTplDetail" parameterType="Map"  useGeneratedKeys="true" keyProperty="id" >
     	<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_TEST_CARD_TEMPLATE_DETAILS (test_card_template_id,test_item,test_standard_no,test_standard,test_request,is_null)
		values
		<foreach collection="detail_list" item="detail" index="index" separator=",">
			(#{tpl_header_id},#{detail.test_item},#{index},#{detail.test_standard},#{detail.test_request},#{detail.is_null})
		</foreach>	
     </insert>
     
     <delete id="deletePrdRcdBusTypeTplByHeader" parameterType="int">
     	delete from BMS_QM_TEST_CARD_TEMPLATE_DETAILS where test_card_template_id=#{tpl_header_id}
     </delete>
     
     <select id="queryPrdRcdBusTypeTplDetail" parameterType="String" resultType="Map">
     	select * from BMS_QM_TEST_CARD_TEMPLATE_DETAILS where test_card_template_id=#{tpl_header_id} 
     	order by cast(test_standard_no as signed)
     </select>
<!-- ======================== xjw end=================================-->

<!-- ======================== yk start=================================-->
	<insert id="insertFaultLib" parameterType="com.byd.bms.quality.model.StdFaultLibBean" useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_STANDARD_FAULT_LIBRARY
		(parts_id,bug_type,bug,serious_level,fault_type,workshop_name,workgroup_name,editor_id,edit_date)
		values(#{partsId},#{bugType},#{bug},#{faultLevel},#{faultType},#{workshop},#{workgroup},#{editorId},#{editDate})
	</insert>
	<update id="updateFaultLib" parameterType="com.byd.bms.quality.model.StdFaultLibBean">
		update BMS_QM_STANDARD_FAULT_LIBRARY
		<set>
			parts_id=#{partsId},bug_type=#{bugType},bug=#{bug},serious_level=#{faultLevel},fault_type=#{faultType},workshop_name=#{workshop},
			workgroup_name=#{workgroup},editor_id=#{editorId},edit_date=#{editDate}
		</set>
		where id=#{id}
	</update>
	
	<select id="getQualityTargetList" parameterType="Map" resultType="Map">
		select
		p.id,p.factory_id,f.factory_name,p.workshop_id,w.workshop_name,p.target_type
		target_type_id,k.key_name target_type,p.target_value,
		p.estart_date,p.eend_date,p.editor_id,u.display_name AS username,p.edit_date,p.status
		from BMS_QM_QUALITY_TARGET_PARAMETER p 
		left join BMS_BASE_USER u on p.editor_id=u.id
		left join BMS_BASE_FACTORY f on p.factory_id=f.id
		left join BMS_BASE_WORKSHOP w on p.workshop_id=w.id
		left join BMS_BASE_KEY k on p.target_type=k.id
		where p.status='0'
		<if test="factoryId!=null and factoryId!=0">
			and p.factory_id=#{factoryId}
		</if>
		<if test="workshopId!=null and  workshopId!=0">
			and p.workshop_id=#{workshopId}
		</if>
		<if test="targetTypeId!=null and  targetTypeId!=0">
			and p.target_type=#{targetTypeId}
		</if>
		<if test="effecDateStart!=null and  effecDateStart!=''">
			<![CDATA[and p.estart_date>=#{effecDateStart}]]>
		</if>
		<if test="effecDateEnd!=null and  effecDateEnd!=''">
			<![CDATA[and p.eend_date <= #{effecDateEnd}]]>
		</if>
		order by p.edit_date desc
		<if test="start !=null">
			LIMIT ${start} ,${length} 
		</if>
	</select>
	<select id="getQualityTargetCount" parameterType="Map" resultType="int">
		select count(p.id)
		from BMS_QM_QUALITY_TARGET_PARAMETER p left join
		BMS_BASE_USER u on p.editor_id=u.id
		left join BMS_BASE_FACTORY f on p.factory_id=f.id
		left join BMS_BASE_WORKSHOP w on p.workshop_id=w.id
		left join BMS_BASE_KEY k on p.target_type=k.id
		where p.status='0'
		<if test="factoryId!=null and factoryId!=0">
			and p.factory_id=#{factoryId}
		</if>
		<if test="workshopId!=null and  workshopId!=0">
			and p.workshop_id=#{workshopId}
		</if>
		<if test="targetTypeId!=null and  targetTypeId!=0">
			and p.target_type=#{targetTypeId}
		</if>
		<if test="effecDateStart!=null and  effecDateStart!=''">
			<![CDATA[and p.estart_date>=#{effecDateStart}]]>
		</if>
		<if test="effecDateEnd!=null and  effecDateEnd!=''">
			<![CDATA[and p.eend_date <= #{effecDateEnd}]]>
		</if>
	</select>
	<insert id="insertQualityTarget" parameterType="com.byd.bms.quality.model.QualityTargetBean" useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_QUALITY_TARGET_PARAMETER
		(factory_id,workshop_id,target_type,target_value,estart_date,eend_date,status,editor_id,edit_date)
		values(#{factoryId},#{workshopId},#{targetTypeId},#{targetVal},#{effecDateStart},#{effecDateEnd},'0',#{editorId},#{editDate})
	</insert>
	<update id="updateQualityTarget" parameterType="com.byd.bms.quality.model.QualityTargetBean">
		update BMS_QM_QUALITY_TARGET_PARAMETER
		<set>
			factory_id=#{factoryId},workshop_id=#{workshopId},target_type=#{targetTypeId},target_value=#{targetVal},estart_date=#{effecDateStart},
			eend_date=#{effecDateEnd},status=#{status},editor_id=#{editorId},edit_date=#{editDate}
		</set>
		where id=#{id}
	</update>
	
	<select id="getProcessFaultList" parameterType="Map" resultType="Map">
	SELECT p.*,f.factory_name FROM BMS_QM_PROCESS_PROBLEM p
	LEFT JOIN BMS_BASE_FACTORY f ON p.factory_id = f.id
	WHERE 1=1 
		<if test="factory_id != null and factory_id != 0">
			AND p.factory_id = #{factory_id}
		</if>
		<if test="customer_name != null and customer_name != 0">
			AND p.customer_name LIKE CONCAT('%',#{customer_name},'%')
		</if>
		<if test="status != null and status != 0">
			AND p.status = #{status}
		</if>
		<if test="fault_phenomenon != null and fault_phenomenon != 0">
			AND p.fault_phenomenon LIKE CONCAT('%',#{fault_phenomenon},'%')
		</if>
		<if test="fault_date_start != null and fault_date_start != 0">
			AND p.fault_date >= #{fault_date_start}
		</if>
		<if test="fault_date_end != null and fault_date_end != 0">
			<![CDATA[ AND p.fault_date <= #{fault_date_end} ]]>
		</if>
	</select>
	<select id="getProcessFaultCount" parameterType="Map" resultType="int">
	SELECT COUNT(p.id) FROM BMS_QM_PROCESS_PROBLEM p
	LEFT JOIN BMS_BASE_FACTORY f ON p.factory_id = f.id
	WHERE 1=1  
		<if test="factory_id != null and factory_id != 0">
			AND p.factory_id = #{factory_id}
		</if>
		<if test="customer_name != null and customer_name != 0">
			AND p.customer_name LIKE CONCAT('%',#{customer_name},'%')
		</if>
		<if test="status != null and status != 0">
			AND p.status = #{status}
		</if>
		<if test="fault_phenomenon != null and fault_phenomenon != 0">
			AND p.fault_phenomenon LIKE CONCAT('%',#{fault_phenomenon},'%')
		</if>
		<if test="fault_date_start != null and fault_date_start != 0">
			AND p.fault_date >= #{fault_date_start}
		</if>
		<if test="fault_date_end != null and fault_date_end != 0">
			<![CDATA[ AND p.fault_date <= #{fault_date_end} ]]>
		</if>
	</select>
	
	
<!-- ======================== yk end=================================-->

<!-- ======================== tj start=================================-->

<!-- ======================== tj end=================================-->

	
	
	<!-- ÂìÅË¥®Ê†áÂáÜÊõ¥Êñ∞ËÆ∞ÂΩï start add by tangjin -->
	
	<resultMap type="com.byd.bms.quality.model.BmsBaseQCStdRecord" id="stdRecordMap">
		<id property="id" column="id" />
		<result property="recordNo" column="record_num" />
		<result property="usynopsis" column="usynopsis" />
		<result property="standardfile" column="standardfile" />
		<result property="bfilePath" column="bfile_path" />
		<result property="afilePath" column="afile_path" />
		<result property="memo" column="memo" />
		<result property="editorId" column="creator_id" />
		<result property="editDate" column="creat_date" />
		<result property="editor" column="editor" />
	</resultMap>
	<insert id="insertStdRecord" parameterType="com.byd.bms.quality.model.BmsBaseQCStdRecord"
		useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_QUALITY_STANDARDS_CHANGE_LOGS 
		(record_num,usynopsis,standardfile,bfile_path,afile_path,memo,creator_id,creat_date)
		values(
		#{recordNo},#{usynopsis},#{standardfile},#{bfilePath},#{afilePath},#{memo},#{editorId},#{editDate}
		)
	</insert>
	<select id="selectStdRecord" parameterType="int" resultMap="stdRecordMap">
		select * from BMS_QM_QUALITY_STANDARDS_CHANGE_LOGS where
		id=#{recordId}
	</select>
	<select id="getStdRecordList" parameterType="Map" resultMap="stdRecordMap">
		select t.*,u.username editor from BMS_QM_QUALITY_STANDARDS_CHANGE_LOGS
		t
		left join BMS_BASE_USER u on t.creator_id=u.id where 1=1
		<if test="recordNo!=null and recordNo!=0">
			and t.record_num=#{recordNo}
		</if>
		<if test="stdFileName!=null and  stdFileName!=''">
			and t.standardfile=#{stdFileName}
		</if>
		<if test="updateStart!=null and  updateStart!=''">
			<![CDATA[and t.creat_date>=#{updateStart}]]>
		</if>
		<if test="updateEnd!=null and  updateEnd!=''">
			<![CDATA[and t.creat_date < #{updateEnd}]]>
		</if>
		order by t.creat_date desc
		<if test="offset!=null">
			LIMIT #{offset} ,#{pageSize}
		</if>
	</select>
	<select id="getStdRecordCount" parameterType="Map" resultType="int">
		select count(t.id) from BMS_QM_QUALITY_STANDARDS_CHANGE_LOGS t left
		join BMS_BASE_USER u on t.creator_id=u.id where 1=1
		<if test="recordNo!=null and recordNo!=0">
			and record_num=#{recordNo}
		</if>
		<if test="stdFileName!=null and  stdFileName!=''">
			and standardfile=#{stdFileName}
		</if>
		<if test="updateStart!=null and  updateStart!=''">
			<![CDATA[and t.creat_date>=#{updateStart}]]>
		</if>
		<if test="updateEnd!=null and  updateEnd!=''">
			<![CDATA[and t.creat_date < #{updateEnd}]]>
		</if>
     </select>
     
     <select id="getFaultLibList" parameterType="Map" resultType="Map">
     	select f.id,f.parts_id,p.parts_name parts,f.bug_type,f.bug,f.serious_level,f.fault_type,
		f.workshop_name,f.workgroup_name,f.editor_id,u.display_name,f.edit_date
		from BMS_QM_STANDARD_FAULT_LIBRARY f 
		left join BMS_BASE_USER u on f.editor_id=u.id
		left join BMS_BASE_PARTS p on f.parts_id=p.id
		where 1=1
		<if test="parts!=null and parts!=''">
			and p.parts_name like CONCAT('%',#{parts},'%')
		</if>
		<if test="bugType !=null and  bugType !=''">
			and f.bug_type like CONCAT('%',#{bugType},'%')
		</if>
		<if test="bug!=null and  bug!=''">
			and f.bug like CONCAT('%',#{bug},'%')
		</if>
		<if test="workshop!=null and  workshop!=''">
			and f.workshop_name=#{workshop}
		</if>
		<if test="workgroup!=null and  workgroup!=''">
			and f.workgroup_name=#{workgroup}
		</if>
		<if test="faultType!=null and faultType.length!=0">
			and f.fault_type in
			<foreach collection="faultType" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="faultLevel!=null  and faultLevel.length!=0">
			and f.serious_level in
			<foreach collection="faultLevel" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		order by f.edit_date desc
		<if test="start !=null">
			LIMIT ${start} ,${length} 
		</if>
     </select>
     <select id="getFaultLibCount" parameterType="Map" resultType="int">
		select count(f.id)
		from BMS_QM_STANDARD_FAULT_LIBRARY f left join
		BMS_BASE_USER u on f.editor_id=u.id
		left join BMS_BASE_PARTS p on
		f.parts_id=p.id
		where 1=1
		<if test="parts!=null and parts!=''">
			and p.parts_name like CONCAT('%',#{parts},'%')
		</if>
		<if test="bugType !=null and  bugType !=''">
			and f.bug_type like CONCAT('%',#{bugType},'%')
		</if>
		<if test="bug!=null and  bug!=''">
			and f.bug like CONCAT('%',#{bug},'%')
		</if>
		<if test="workshop!=null and  workshop!=''">
			and f.workshop_name=#{workshop}
		</if>
		<if test="workgroup!=null and  workgroup!=''">
			and f.workgroup_name=#{workgroup}
		</if>
		<if test="faultType!=null and faultType.length!=0">
			and f.fault_type in
			<foreach collection="faultType" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="faultLevel!=null and faultLevel.length!=0">
			and f.serious_level in
			<foreach collection="faultLevel" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
	</select>
     
     
</mapper>
