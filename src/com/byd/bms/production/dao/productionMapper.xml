<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.byd.bms.production.dao.IProductionDao">

	<select id="queryLineProcessList" parameterType="Map" resultType="Map">
		SELECT p.line line_name,p.workshop workshop_name,p.factory factory_name,
		concat('[',group_concat('{"id":',p.id,',"code":"',TRIM(p.process_code),'","monitor_flag":"',p.monitory_point_flag,'","name":"',TRIM(p.process_name),'"}' order by p.id),']') process_list
		FROM BMS_BASE_PROCESS p
		where p.factory=#{factory} and p.workshop=#{workshop} and p.delete_flag='0'
		group by p.line
	</select>
	
	<select id="queryProcessMonitorList" parameterType="Map" resultType="Map">
		select p.id,p.process_code,r.process_name,k.key_name plan_node_name,k.key_name_en field_name
		from BMS_PD_SCAN_RULE r
		left join BMS_BASE_PROCESS p on r.factory=p.factory and r.workshop=p.workshop 
		and p.line=#{line} and p.process_name=r.process_name 
		left join BMS_BASE_KEY k on k.id=p.plan_node_id 
		where p.monitory_point_flag='1' and p.delete_flag='0' 
		and r.factory=#{factory} and r.workshop=#{workshop} and p.line=#{line} 
		and r.order_type=#{order_type}
		order by r.sequence asc
	</select>
	
	<select id="queryBusInfo" parameterType="String" resultType="Map">
		select b.*,f.factory_name,CONCAT(o.order_name,t.bus_type_code,' ',o.order_qty,'台') AS order_desc,
		case b.status when '0' then '正常' else '冻结' end as status,p.factory,p.workshop,p.line,p.process_name,o.order_type,o.bus_type_id
		from BMS_PLAN_BUS b
		left join BMS_BASE_FACTORY f on b.factory_id=f.id
		left join BMS_OR_ORDER o on b.order_id=o.id
		left join BMS_BASE_BUS_TYPE t on o.bus_type_id=t.id
		left join BMS_BASE_PROCESS p on p.id=b.latest_process_id
		where b.bus_number=#{bus_number}
	</select>
	
	<select id="queryKeyParts" parameterType="Map" resultType="Map">
		select ptd.*,p.batch,p.id parts_id,p.bus_number
		from BMS_QM_KEY_PARTS_TEMPLATE_DETAILS ptd
		left join BMS_QM_KEY_PARTS_TEMPLATE_HEADER pth on pth.id=ptd.key_components_template_id
		left join BMS_QM_KEY_PARTS p on p.key_parts_template_details_id=ptd.id 
		and p.bus_number=#{bus_number} and p.factory_id=#{factory_id} and p.workshop=#{workshop}
		where pth.bus_type_id=#{bus_type_id} and pth.order_id=#{order_id} and pth.order_config_id=#{order_config_id} 
		and ptd.workshop=#{workshop} and ptd.process=#{process_name}
	</select>
	
	<select id="queryOrderConfigList" parameterType="String" resultType="Map">
		select *
		from BMS_OR_ORDER_CONFIG_DETAIL cd
		where cd.order_config_id=#{order_config_id}
	</select>
	
	<select id="queryScanLastPlanNode" parameterType="Map" resultType="Map">		
		<!-- SELECT s.id,s.process_name,s.scan_time
		FROM BMS_PD_SCAN s where s.process_id=(
		SELECT p.id process_id,p.process_name
		FROM BMS_PD_SCAN_RULE r
		LEFT JOIN BMS_BASE_PROCESS p on r.factory=p.factory and r.workshop=p.workshop 
		and p.process_name=r.process_name and p.line=#{line}
		where p.plan_node_id !=0 and r.factory=#{factory} and r.workshop=#{workshop} and r.sequence=(
			select r1.sequence-1 from BMS_PD_SCAN_RULE r1 where r1.factory=#{factory} and r1.workshop=#{workshop}
			and r1.process_name=#{process_name} and r1.order_type=#{order_type}
		) and r.order_type=#{order_type} ) and s.bus_number=#{bus_number} -->
		SELECT s.id,s.process_name,s.scan_time
		FROM BMS_PD_SCAN s where s.process_id=#{last_process_id} and s.bus_number=#{bus_number}
	</select>
	
	<select id="queryLastPlanNode" parameterType="Map" resultType="Map">
		SELECT p.id process_id,p.process_name,r.sequence
		FROM BMS_PD_SCAN_RULE r
		LEFT JOIN BMS_BASE_PROCESS p on r.factory=p.factory and r.workshop=p.workshop 
		and p.process_name=r.process_name and p.line=#{line_name}
		where p.plan_node_id !=0 and r.factory=#{factory_name} <!-- and r.workshop=#{workshop_name} --> and r.sequence&lt;=(
			select r1.sequence-1 from BMS_PD_SCAN_RULE r1 where r1.factory=#{factory_name} <!-- and r1.workshop=#{workshop_name} -->
			and r1.process_name=#{process_name} and r1.order_type=#{order_type})
		and r.order_type=#{order_type} 
		order by r.sequence desc
		limit 1
	</select>
	
	<select id="queryScanRecord" parameterType="Map" resultType="int">
		select count(id)
		from BMS_PD_SCAN
		where bus_number=#{bus_number} and process_id=#{process_id}
	</select>
	
	<insert id="saveParts" parameterType="List"  useGeneratedKeys="true" keyProperty="id">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_QM_KEY_PARTS
		(bus_number,factory_id,key_parts_template_details_id,workshop,process_number,process_name,parts_no,parts_name,vendor,batch,editor_id,edit_date)
		values
		<foreach  collection="parts_list" item="detail" index="index" separator=",">
		(#{detail.bus_number},#{detail.factory_id},#{detail.id},#{detail.workshop},#{detail.process_number},#{detail.process_name},
		#{detail.parts_no} ,#{detail.parts_name},#{detail.vendor},#{detail.batch},#{detail.editor_id},#{detail.edit_date}
		)
		</foreach>
	</insert>
	
	<update id="updateParts" parameterType="List" >
		update BMS_QM_KEY_PARTS set
		batch=
		<foreach collection="parts_list" item="detail" index="index" separator="" open=" case id" close="end">
			when #{detail.parts_id} then #{detail.batch}
		</foreach>
		where id in
		<foreach collection="parts_list" item="detail" index="index" separator="," open=" (" close=")">
			#{detail.parts_id}
		</foreach>
	
	</update>
	
	<insert id="saveScanRecord" parameterType="Map"  useGeneratedKeys="true" keyProperty="id">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_PD_SCAN (bus_number,process_id,factory_name,workshop_name,line_name,process_name,scanner_id,scan_time)
		values
		(#{bus_number},#{process_id},#{factory_name},#{workshop_name},#{line_name},#{process_name},#{editor_id},#{edit_date})
	</insert>
	
	<update id="updateBusProcess" parameterType="Map">
		update BMS_PLAN_BUS set latest_process_id=#{process_id}
		<if test="field_name !=null and field_name !=''">
			,${field_name}=#{edit_date}
		</if>
		where bus_number=#{bus_number}
	</update>
	
	<insert id="insertProductionException"   parameterType="List"  useGeneratedKeys="true" keyProperty="id">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_PD_PRODUCTION_EXCEPTION
		(factory,workshop,line,process,bus_number,reason_type_id,lack_reason_id,detailed_reasons,editor_id,edit_date,start_time,severity_level_id)
		values
		<foreach  collection="list" item="detail" index="index" separator=",">
		(#{detail.factory},#{detail.workshop},#{detail.line},#{detail.process},#{detail.bus_number},#{detail.reason_type_id},#{detail.lack_reason_id},#{detail.detailed_reasons},#{detail.editor_id},#{detail.edit_date},#{detail.start_time},#{detail.severity_level_id})
		</foreach>
	</insert>
	
	<select id="queryBusInfoList" parameterType="Map" resultType="Map">
		SELECT b.*,CONCAT(o.order_name,t.bus_type_code,o.order_qty,'台') AS order_desc,f.factory_name,o.order_no
		FROM BMS_PLAN_BUS b
		LEFT JOIN BMS_OR_ORDER o on b.order_id=o.id
		LEFT JOIN BMS_BASE_BUS_TYPE t on o.bus_type_id=t.id
		LEFT JOIN BMS_BASE_FACTORY f on b.factory_id=f.id
		WHERE 1=1
		<if test="order_no !=null and order_no !=''">
			and o.order_no=#{order_no}
		</if>
		<if test="factory_id !=null and factory_id !=''">
			and find_in_set(b.factory_id,#{factory_id})>0
		</if>
		<if test="bus_number !=null and bus_number !=''">
			and b.bus_number like concat('%',#{bus_number},'%')
		</if>
		<if test="bus_type !=null and bus_type !='全部'">
			and t.internal_name =#{bus_type}
		</if>
		<if test="start !=null">
			LIMIT #{start} ,#{length} 
		</if>		
	</select>
	
	<select id="queryBusInfoCount" parameterType="Map" resultType="int">
		SELECT count(b.id)
		FROM BMS_PLAN_BUS b
		LEFT JOIN BMS_OR_ORDER o on b.order_id=o.id
		LEFT JOIN BMS_BASE_BUS_TYPE t on o.bus_type_id=t.id
		LEFT JOIN BMS_BASE_FACTORY f on b.factory_id=f.id
		WHERE 1=1
		<if test="order_no !=null and order_no !=''">
			and o.order_no=#{order_no}
		</if>
		<if test="factory_id !=null and factory_id !=''">
			and find_in_set(b.factory_id,#{factory_id})>0
		</if>
		<if test="bus_number !=null and bus_number !=''">
			and b.bus_number like concat('%',#{bus_number},'%')
		</if>
		<if test="bus_type !=null and bus_type !='全部'">
			and t.internal_name =#{bus_type}
		</if>
	</select>
	
	<update id='updateBusInfo' parameterType="Map">
		update BMS_PLAN_BUS set bus_color=#{bus_color},bus_seats=#{bus_seats},spring_num=#{spring_num},
		passenger_num=#{passenger_num},tire_type=#{tire_type},battery_capacity=#{battery_capacity},
		rated_voltage=#{rated_voltage},dp_production_date=#{dp_production_date},dp_zzd=#{dp_zzd},
		zc_production_date=#{zc_production_date},zc_zzd=#{zc_zzd},hgz_note=#{hgz_note},ccczs_date=#{ccczs_date},
		dpgg_date=#{dpgg_date},zcgg_date=#{zcgg_date}
		where 1=1
		<if test="factory_id !=null and factory_id !=''">
			and factory_id=#{factory_id}
		</if>
		<if test="order_id !=null and order_id !=''">
			and order_id=#{order_id}
		</if>
		<if test="bus_list !=null and bus_list !=''">
			and find_in_set(bus_number ,#{bus_list})>0
		</if>
		<if test="bus_number !=null and bus_number !=''">
			and bus_number=#{bus_number}
		</if>
	</update>
	
	<select id="querySupplyTotalCount" parameterType="Map" resultType="Map">
		select a.supply_total,(b.order_qty-a.supply_total)left_qty 
		from
		(select ifnull(sum(quantity),0) supply_total 
		from BMS_PD_WORKSHOP_SUPPLY s
		left join BMS_OR_ORDER o on o.id=s.order_id
		where s.factory_id=#{factory_id} and o.order_no=#{order_no} and
		s.supply_workshop=#{supply_workshop} and s.receive_workshop=#{receive_workshop}) a,
		(select ifnull(sum(fo.production_qty),0) order_qty 
		from BMS_OR_FACTORY_ORDER fo
		left join BMS_OR_ORDER o on fo.order_id=o.id
		where fo.factory_id=#{factory_id} and o.order_no=#{order_no}) b
	</select>
	
	<insert id="saveWorkshopSupply" parameterType="Map" useGeneratedKeys="true" keyProperty="id">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_PD_WORKSHOP_SUPPLY (factory_id,order_id,supply_workshop,receive_workshop,quantity,supply_date,editor_id,edit_date)
		values
		(#{factory_id},#{order_id},#{supply_workshop},#{receive_workshop},#{quantity},#{supply_date},#{editor_id},#{edit_date})	
	</insert>
	
	<update id="updateWorkshopSupply" parameterType="Map">
		update BMS_PD_WORKSHOP_SUPPLY set factory_id=#{factory_id},order_id=#{order_id},supply_workshop=#{supply_workshop},
		receive_workshop=#{receive_workshop},quantity=#{quantity},supply_date=#{supply_date},editor_id=#{editor_id},edit_date=#{edit_date}
		where id=#{id}
	</update>
	
	<select id="queryWorkshopSupplyList" parameterType="Map" resultType="Map">
		SELECT s.*,f.factory_name,s.supply_workshop workshop_name,s.receive_workshop,o.order_no,
		CONCAT(o.order_no,' ',o.order_name,t.internal_name,' ',ifnull(fo.production_qty,0)) as order_desc,u.display_name editor,
		(select sum(quantity) from
		BMS_PD_WORKSHOP_SUPPLY s1
		where s1.factory_id=s.factory_id and s1.order_id=s.order_id
		and s1.supply_workshop=s.supply_workshop
		and s1.receive_workshop=s.receive_workshop) supply_total
		FROM BMS_PD_WORKSHOP_SUPPLY s
		LEFT JOIN BMS_BASE_FACTORY f ON s.factory_id = f.id
		LEFT JOIN BMS_OR_ORDER o ON s.order_id=o.id
		LEFT JOIN BMS_OR_FACTORY_ORDER fo on fo.order_id=o.id and fo.factory_id=s.factory_id
		LEFT JOIN BMS_BASE_BUS_TYPE t ON t.id = o.bus_type_id
		LEFT JOIN BMS_BASE_USER u on u.id=s.editor_id
		where 1=1
		<if test="factory_id!=''">
			and s.factory_id = #{factory_id}
		</if>
		<if test="order_no!=''">
			and o.order_no = #{order_no}
		</if>
		<if test="supply_workshop !='' and supply_workshop !=null">
			and find_in_set(s.supply_workshop, #{supply_workshop})>0
		</if>
		<if test="receive_workshop !='' and receive_workshop !='全部'">
			and s.receive_workshop = #{receive_workshop}
		</if>
		<if test="search_date_start !=''">
			and s.supply_date >= #{search_date_start}
		</if>
		<if test="search_date_end !=''">
			and s.supply_date &lt;= #{search_date_end}
		</if>
		<if test="orderColumn !=null">
			order by ${orderColumn}
		</if>
		<if test="start !=null">
			LIMIT #{start} ,#{length} 
		</if>
	</select>
	
	<select id="queryWorkshopSupplyCount" parameterType="Map" resultType="int">
		SELECT count(s.id)
		FROM BMS_PD_WORKSHOP_SUPPLY s
		LEFT JOIN BMS_OR_ORDER o on s.order_id=o.id
		where 1=1
		<if test="factory_id!=''">
			and s.factory_id = #{factory_id}
		</if>
		<if test="order_no!=''">
			and o.order_no = #{order_no}
		</if>
		<if test="supply_workshop !='' and supply_workshop !=null">
			and find_in_set(s.supply_workshop, #{supply_workshop})>0
		</if>
		<if test="receive_workshop !='' and receive_workshop !='全部'">
			and s.receive_workshop = #{receive_workshop}
		</if>
		<if test="search_date_start !=''">
			and s.supply_date >= #{search_date_start}
		</if>
		<if test="search_date_end !=''">
			and s.supply_date &lt;= #{search_date_end}
		</if>
	</select>
	
	<select id="queryPartsFinishCount" parameterType="Map" resultType="Map">
		select ifnull(sum(f.online_real_qty),0) online_total,ifnull(sum(f.offline_real_qty),0) offline_total,sum(fo.production_qty) production_qty
		from BMS_OR_FACTORY_ORDER fo
		left join BMS_PD_PARTS_PLAN_FINISH f on f.order_id=fo.order_id and
		f.factory_id=fo.factory_id and f.parts_id=#{parts_id}
		left join BMS_OR_ORDER o on fo.order_id=o.id
		where o.order_no=#{order_no} and fo.factory_id=#{factory_id}
		group by fo.order_id,fo.factory_id
	</select>
	
		<insert id="savePartsOnOffRecord" parameterType="Map" useGeneratedKeys="true" keyProperty="id">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_PD_PARTS_PLAN_FINISH (factory_id,order_id,parts_id,prod_date,online_plan_qty,offline_plan_qty,online_real_qty,offline_real_qty,editor_id,edit_date)
		values (#{factory_id},#{order_id},#{parts_id},#{prod_date},(SELECT sum(IFNULL(p.plan_qty,0)) as plan_qty FROM BMS_PLAN_PRODUCTION_PLAN p 
		LEFT JOIN BMS_BASE_KEY k on k.value=p.plan_code_value and k.key_code='PLAN_CODE'
		WHERE p.plan_date = #{prod_date} AND p.order_id=#{order_id}
		AND p.factory_id = #{factory_id} AND k.key_name='部件上线'),(SELECT sum(IFNULL(p.plan_qty,0)) as plan_qty FROM BMS_PLAN_PRODUCTION_PLAN p 
		LEFT JOIN BMS_BASE_KEY k on k.value=p.plan_code_value and k.key_code='PLAN_CODE'
		WHERE p.plan_date = #{prod_date} AND p.order_id=#{order_id}
		AND p.factory_id = #{factory_id} AND k.key_name='部件下线'),
		#{online_num},#{offline_num},#{editor_id},#{edit_date}	
		)
	</insert>
	
	<update id="updatePartsOnOffRecord" parameterType="Map">
		update BMS_PD_PARTS_PLAN_FINISH 
		SET  factory_id=#{factory_id},order_id=#{order_id},parts_id=#{parts_id}, prod_date=#{prod_date},
		online_real_qty=#{online_num},offline_real_qty=#{offline_num}, editor_id=#{editor_id},edit_date=#{edit_date},
		online_plan_qty=(SELECT sum(IFNULL(p.plan_qty,0)) as plan_qty FROM BMS_PLAN_PRODUCTION_PLAN p 
		LEFT JOIN BMS_BASE_KEY k on k.value=p.plan_code_value and k.key_code='PLAN_CODE'
		WHERE p.plan_date = #{prod_date} AND p.order_id=#{order_id}
		AND p.factory_id = #{factory_id} AND k.key_name='部件上线'),
		offline_plan_qty=(SELECT sum(IFNULL(p.plan_qty,0)) as plan_qty FROM BMS_PLAN_PRODUCTION_PLAN p 
		LEFT JOIN BMS_BASE_KEY k on k.value=p.plan_code_value and k.key_code='PLAN_CODE'
		WHERE p.plan_date = #{prod_date} AND p.order_id=#{order_id}
		AND p.factory_id = #{factory_id} AND k.key_name='部件下线')
		where id=#{id}
	</update>
	
	<select id="queryPartsOnOffList" parameterType="Map" resultType="Map">
		SELECT p.*,f.factory_name,CONCAT(o.order_no,' ',o.order_name,x.internal_name,' ',o.order_qty) as order_desc,k.key_name parts_name,u.username editor,o.order_no,
		(select sum(p1.online_real_qty) from BMS_PD_PARTS_PLAN_FINISH p1 where p1.factory_id=p.factory_id and p1.order_id=p.order_id and p1.parts_id=p.parts_id ) online_total,
		(select sum(p1.offline_real_qty) from BMS_PD_PARTS_PLAN_FINISH p1 where p1.factory_id=p.factory_id and p1.order_id=p.order_id and p1.parts_id=p.parts_id ) offline_total
		FROM BMS_PD_PARTS_PLAN_FINISH p
		LEFT JOIN BMS_BASE_FACTORY f ON p.factory_id = f.id
		LEFT JOIN BMS_OR_ORDER o ON p.order_id = o.id
		LEFT JOIN BMS_BASE_KEY k ON p.parts_id = k.id
		LEFT JOIN BMS_BASE_BUS_TYPE x ON x.id = o.bus_type_id
		LEFT JOIN BMS_BASE_USER u on u.id=p.editor_id
		where 1=1
		<if test="factory_id !=''">
			and p.factory_id = #{factory_id}
		</if>
		<if test="order_no !=''">
			and o.order_no = #{order_no}
		</if>
		<if test="parts_id !=''">
			and p.parts_id=#{parts_id}
		</if>
		<if test="search_date_start !=''">
			and p.prod_date >= #{search_date_start}
		</if>
		<if test="search_date_end!=''">
			and p.prod_date &lt;= #{search_date_end}
		</if>
		<if test="orderColumn !=null">
			order by ${orderColumn}
		</if>
		<if test="start !=null">
			LIMIT #{start} ,#{length} 
		</if>
	</select>
	
	<select id="queryPartsOnOffCount" parameterType="Map" resultType="int">
		SELECT count(p.id)
		FROM BMS_PD_PARTS_PLAN_FINISH p
		LEFT JOIN BMS_OR_ORDER o ON p.order_id = o.id
		where 1=1
		<if test="factory_id !=''">
			and p.factory_id = #{factory_id}
		</if>
		<if test="order_no !=''">
			and o.order_no = #{order_no}
		</if>
		<if test="parts_id !=''">
			and p.parts_id=#{parts_id}
		</if>
		<if test="search_date_start !=''">
			and p.prod_date >= #{search_date_start}
		</if>
		<if test="search_date_end!=''">
			and p.prod_date &lt;= #{search_date_end}
		</if>
	</select>
	
	
	
	
</mapper>
