<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.byd.bms.setting.dao.ISettingDao">

	<select id="getRoleList" resultType="com.byd.bms.setting.model.BmsBaseRole">
		SELECT id, role_name, role_description, type, edit_user, edit_time FROM BMS_BASE_ROLE
	</select>
	
	<select id="getFunctionList" resultType="com.byd.bms.setting.model.BmsBaseFunction">
		SELECT f1.*,
		(SELECT COUNT(f2.id) FROM BMS_BASE_FUNCTION f2 WHERE f2.parent_function_id = f1.id) AS sub_count
		FROM BMS_BASE_FUNCTION f1  order by f1.parent_function_id,f1.priority;
	</select>
	
	<select id="getRolePermission" parameterType="String" resultType="com.byd.bms.setting.model.BmsBaseRolePermission">
		SELECT id, role_id, function_id FROM BMS_BASE_ROLE_PERMISSION where role_id = #{role_id};
	</select>
	
	<select id="getBaseFunctionPermission" parameterType="String" resultType="com.byd.bms.setting.model.BmsBaseFunctionPermission">
		SELECT id, role_id, permission_id FROM BMS_BASE_FUNCTION_PERMISSION where role_id = #{role_id};
	</select>
	
	<insert id="addRole" useGeneratedKeys="true" keyProperty="id" parameterType="com.byd.bms.setting.model.BmsBaseRole">
		INSERT INTO BMS_BASE_ROLE( role_name, role_description, type, edit_user, edit_time)
		VALUES( #{role_name}, #{role_description}, #{type}, #{edit_user}, #{edit_time});
	</insert>
	
	<update id="delRoleFunction" parameterType="String">
		<![CDATA[
		DELETE FROM BMS_BASE_ROLE_PERMISSION
		WHERE role_id = #{role_id} AND function_id  NOT IN (${function_ids});
		]]>
	</update>
	
	<insert id="addRoleFunction" parameterType="String">
		<![CDATA[
		INSERT INTO BMS_BASE_ROLE_PERMISSION (role_id, function_id)
		SELECT #{role_id},#{function_id} FROM DUAL WHERE NOT EXISTS
		(SELECT id FROM BMS_BASE_ROLE_PERMISSION WHERE role_id = #{role_id} AND function_id = #{function_id})
		]]>
	</insert>
	
	<update id="delFunctionPermission" parameterType="String">
		<![CDATA[
		DELETE FROM BMS_BASE_FUNCTION_PERMISSION
		WHERE role_id = #{role_id} AND permission_id  NOT IN (${permission_ids});
		]]>
	</update>
	
	<insert id="addFunctionPermission" parameterType="String">
		<![CDATA[
		INSERT INTO BMS_BASE_FUNCTION_PERMISSION (role_id, permission_id)
		SELECT #{role_id},#{permission_id} FROM DUAL WHERE NOT EXISTS
		(SELECT id FROM BMS_BASE_FUNCTION_PERMISSION WHERE role_id = #{role_id} AND permission_id = #{permission_id})
		]]>
	</insert>
	
	<insert id="addUser" useGeneratedKeys="true" keyProperty="id" parameterType="com.byd.bms.util.model.BmsBaseUser">
		<![CDATA[
		INSERT INTO BMS_BASE_USER(staff_number, card_8H10D, username, email, telephone, cellphone, password, display_name, factory_id, department_id, admin, isdelete, create_user, create_time, login_count)
		VALUES( #{staff_number}, '0', #{username}, #{email}, #{telephone}, #{cellphone}, #{password}, #{display_name}, #{factory_id}, #{department_id}, #{admin},'0', #{create_user}, #{create_time},'0')
		]]>
	</insert>
	
	<select id="getUserList" parameterType="String" resultType="com.byd.bms.util.model.BmsBaseUser">
		SELECT * FROM BMS_BASE_USER where 1=1 
		<if test="search_key!=''">
		<![CDATA[
		AND (staff_number LIKE '%${search_key}%' OR username LIKE '%${search_key}%' OR display_name LIKE '%${search_key}%' OR email LIKE '%${search_key}%' 
		 OR telephone LIKE '%${search_key}%' OR cellphone LIKE '%${search_key}%')		 
		]]>
		</if>
	</select>
	
	<select id="getUserRole" parameterType="String" resultType="com.byd.bms.setting.model.BmsUserRole">
		SELECT U.*,R.role_name,P.permission_name FROM BMS_BASE_USER_ROLE U
		LEFT JOIN BMS_BASE_ROLE R ON U.role_id = R.id
		LEFT JOIN BMS_BASE_PERMISSION P ON U.permission_key = P.id 
		<if test="staff_number!=''">
		<![CDATA[
			WHERE U.staff_number = #{staff_number}
		]]>
		</if>
	</select>
</mapper>
