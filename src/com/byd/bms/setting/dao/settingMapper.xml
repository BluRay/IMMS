<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.byd.bms.setting.dao.ISettingDao">

	<select id="getRoleList" resultType="com.byd.bms.setting.model.BmsBaseRole">
		SELECT id, CONCAT(role_name,'(', role_description,')') as role_name, role_description, type, edit_user, edit_time FROM BMS_BASE_ROLE
	</select>
	
	<select id="getFunctionList" resultType="com.byd.bms.setting.model.BmsBaseFunction">
		SELECT f1.*,
		(SELECT COUNT(f2.id) FROM BMS_BASE_FUNCTION f2 WHERE f2.parent_function_id = f1.id) AS sub_count
		FROM BMS_BASE_FUNCTION f1  order by f1.parent_function_id,f1.priority;
	</select>
	
	<select id="getRolePermission" parameterType="String" resultType="com.byd.bms.setting.model.BmsBaseRolePermission">
		SELECT id, role_id, function_id FROM BMS_BASE_ROLE_PERMISSION where role_id = #{role_id};
	</select>
	
	<select id="getBaseFunctionPermission" parameterType="String" resultType="com.byd.bms.setting.model.BmsBaseFunctionPermission">
		SELECT id, role_id, permission_id FROM BMS_BASE_FUNCTION_PERMISSION where role_id = #{role_id};
	</select>
	
	<insert id="addRole" useGeneratedKeys="true" keyProperty="id" parameterType="com.byd.bms.setting.model.BmsBaseRole">
		INSERT INTO BMS_BASE_ROLE( role_name, role_description, type, edit_user, edit_time)
		VALUES( #{role_name}, #{role_description}, #{type}, #{edit_user}, #{edit_time});
	</insert>
	
	<update id="delRoleFunction" parameterType="String">
		<![CDATA[
		DELETE FROM BMS_BASE_ROLE_PERMISSION
		WHERE role_id = #{role_id} AND function_id  NOT IN (${function_ids});
		]]>
	</update>
	
	<insert id="addRoleFunction" parameterType="String">
		<![CDATA[
		INSERT INTO BMS_BASE_ROLE_PERMISSION (role_id, function_id)
		SELECT #{role_id},#{function_id} FROM DUAL WHERE NOT EXISTS
		(SELECT id FROM BMS_BASE_ROLE_PERMISSION WHERE role_id = #{role_id} AND function_id = #{function_id})
		]]>
	</insert>
	
	<update id="delFunctionPermission" parameterType="String">
		<![CDATA[
		DELETE FROM BMS_BASE_FUNCTION_PERMISSION
		WHERE role_id = #{role_id} AND permission_id  NOT IN (${permission_ids});
		]]>
	</update>
	
	<insert id="addFunctionPermission" parameterType="String">
		<![CDATA[
		INSERT INTO BMS_BASE_FUNCTION_PERMISSION (role_id, permission_id)
		SELECT #{role_id},#{permission_id} FROM DUAL WHERE NOT EXISTS
		(SELECT id FROM BMS_BASE_FUNCTION_PERMISSION WHERE role_id = #{role_id} AND permission_id = #{permission_id})
		]]>
	</insert>
	
	<insert id="addUser" useGeneratedKeys="true" keyProperty="id" parameterType="com.byd.bms.util.model.BmsBaseUser">
		<![CDATA[
		INSERT INTO BMS_BASE_USER(staff_number, card_8H10D, username, email, telephone, cellphone, password, display_name, factory_id, admin, isdelete, create_user, create_time, login_count)
		VALUES( #{staff_number}, '0', #{username}, #{email}, #{telephone}, #{cellphone}, #{password}, #{display_name}, #{factory_id}, #{admin},'0', #{create_user}, #{create_time},'0')
		]]>
	</insert>
	
	<update id="editUser" parameterType="com.byd.bms.util.model.BmsBaseUser">
		<![CDATA[
		UPDATE BMS_BASE_USER SET username=#{username}, email=#{email}, telephone=#{telephone}, cellphone=#{cellphone}, display_name=#{display_name}, 
		factory_id=#{factory_id}, department_id=#{department_id}, admin=#{admin}, modify_time=#{create_time}
		WHERE staff_number=#{staff_number};
		]]>
	</update>
	
	<update id="delUser" parameterType="com.byd.bms.util.model.BmsBaseUser">
		<![CDATA[
		UPDATE BMS_BASE_USER SET isdelete='1' WHERE staff_number=#{staff_number};
		]]>
	</update>
	<select id="getUserById" parameterType="String" resultType="com.byd.bms.util.model.BmsBaseUser">
		SELECT staff_number, username, email, telephone, cellphone, display_name, factory_id FROM BMS_BASE_USER 
		where isdelete = 0 
		<if test="id !=null">
			and id=#{id}
		</if>	
	</select>
	
	<update id="resetUserPass" parameterType="com.byd.bms.util.model.BmsBaseUser">
		<![CDATA[
		UPDATE BMS_BASE_USER SET password=#{password} WHERE staff_number=#{staff_number};
		]]>
	</update>
	
	<select id="getUserList" parameterType="Map" resultType="com.byd.bms.util.model.BmsBaseUser">
		SELECT U.*,F.factory_name FROM BMS_BASE_USER U
		LEFT JOIN BMS_BASE_FACTORY F ON U.factory_id = F.id
		where isdelete = 0 
		<if test="search_key!=''">
		<![CDATA[
		AND (U.staff_number LIKE '%${search_key}%' OR U.username LIKE '%${search_key}%' OR U.display_name LIKE '%${search_key}%' OR U.email LIKE '%${search_key}%' 
		 OR U.telephone LIKE '%${search_key}%' OR U.cellphone LIKE '%${search_key}%')		 
		]]>
		</if>
		<if test="start !=null">
			LIMIT #{start} ,#{length} 
		</if>	
	</select>
	
	<select id="getTotalUserCount" parameterType="Map" resultType="int">
		SELECT COUNT(id) FROM BMS_BASE_USER WHERE isdelete = 0 
		<if test="search_key !=null and search_key !=''">
		<![CDATA[
			AND (staff_number LIKE '%${search_key}%' OR username LIKE '%${search_key}%' OR display_name LIKE '%${search_key}%' OR email LIKE '%${search_key}%' 
			OR telephone LIKE '%${search_key}%' OR cellphone LIKE '%${search_key}%')		 
		]]>
		</if>
	</select>
	
	<select id="getUserRole" parameterType="String" resultType="com.byd.bms.setting.model.BmsUserRole">
		SELECT U.*,R.role_name,P.permission_name FROM BMS_BASE_USER_ROLE U
		LEFT JOIN BMS_BASE_ROLE R ON U.role_id = R.id
		LEFT JOIN BMS_BASE_PERMISSION P ON U.permission_key = P.id 
		<if test="staff_number!=''">
		<![CDATA[
			WHERE U.staff_number = #{staff_number}
		]]>
		</if>
	</select>
	
	<select id="getOneUserRole" parameterType="String" resultType="com.byd.bms.setting.model.BmsUserRole">
		SELECT U.* FROM BMS_BASE_USER_ROLE U WHERE 1=1 
		<if test="staff_number!=''">
		<![CDATA[
			AND U.staff_number = #{staff_number}
		]]>
		</if>
		<if test="role_id!=''">
		<![CDATA[
			AND U.role_id = #{role_id}
		]]>
		</if>
	</select>
	
	<insert id="addUserRole" parameterType="String">
		<![CDATA[
		INSERT INTO BMS_BASE_USER_ROLE
		(staff_number, role_id, permission_key, permission_value, edit_user, edit_time)
		SELECT #{staff_number},#{role_id},#{permission_key},#{permission_value},#{edit_user},#{edit_time} FROM DUAL WHERE NOT EXISTS
		(SELECT id FROM BMS_BASE_USER_ROLE WHERE staff_number = #{staff_number} AND role_id = #{role_id})
		]]>
	</insert>
	<insert id="addOneUserRole" parameterType="String">
		<![CDATA[
		INSERT INTO BMS_BASE_USER_ROLE
		(staff_number, role_id, permission_key, permission_value, edit_user, edit_time)
		SELECT #{staff_number},#{role_id},#{permission_key},#{permission_value},#{edit_user},#{edit_time} FROM DUAL WHERE NOT EXISTS
		(SELECT id FROM BMS_BASE_USER_ROLE WHERE staff_number = #{staff_number} AND role_id = #{role_id} AND permission_key = #{permission_key})
		]]>
	</insert>
	
	<update id="updateUserRole" parameterType="String">
		<![CDATA[
		DELETE FROM BMS_BASE_FUNCTION_PERMISSION
		WHERE role_id = #{role_id} AND permission_id  NOT IN (${permission_ids});
		]]>
	</update>
	
	<update id="delUserRole" parameterType="String">
		<![CDATA[
		DELETE FROM BMS_BASE_USER_ROLE
		WHERE staff_number = #{staff_number} AND role_id NOT IN (${roles});
		]]>
	</update>
	<update id="delOneUserRole" parameterType="String">
		<![CDATA[
		DELETE FROM BMS_BASE_USER_ROLE
		WHERE staff_number = #{staff_number} AND role_id = #{role};
		]]>
	</update>
	<select id='getPermissionByMap' parameterType="Map" resultType="Map">
		select u.id,u.staff_number,ur.role_id,ur.permission_value,r.role_name 
		        from BMS_BASE_USER u 
		   LEFT JOIN BMS_BASE_USER_ROLE ur on u.staff_number=ur.staff_number
		   LEFT JOIN BMS_BASE_ROLE r  on r.id=ur.role_id
		where 1=1 
		<if test="userId !=null and userId !=''"> 
			and u.id=#{userId}
        </if>
        <if test="roleName !=null and roleName !=''"> 
			and r.role_name like '%${roleName}%'
        </if>
	</select>
</mapper>
